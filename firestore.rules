/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence by denormalizing user preferences, and supports secure list operations by segregating data into top-level collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles with denormalized favoriteTeamIds, favoriteCompetitionIds, and favoriteMatchIds.
 * - /matches/{matchId}: Stores match data.
 * - /competitions/{competitionId}: Stores competition data.
 * - /teams/{teamId}: Stores team data.
 * - /news/{newsId}: Stores news articles.
 * - /admins/{adminId}: Stores administrator user data.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles (/users/{userId}).
 * - Matches, Competitions, Teams, and News are publicly readable.
 * - Only authenticated admins can create, update, or delete News articles.
 * - Existence in the /admins/{adminId} collection grants admin privileges.
 *
 * Denormalization for Authorization:
 * - User documents contain denormalized lists of favorite teams, competitions, and matches, eliminating the need for extra `get()` calls during authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Users can only manage their own profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list) - A user can read their own profile.
     * @allow (update, delete) - A user can update or delete their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (update, delete) - A user cannot update or delete another user's profile.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if isOwner(userId); // Owner can list their own data.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to matches. All users can read matches.
     * @path /matches/{matchId}
     * @allow (get, list) - Any user can read match data.
     * @deny (create, update, delete) - No user can create, update, or delete match data.
     * @principle Allows public read access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
    }

    /**
     * @description Controls access to competitions. All users can read competitions.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Any user can read competition data.
     * @deny (create, update, delete) - No user can create, update, or delete competition data.
     * @principle Allows public read access.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
    }

    /**
     * @description Controls access to teams. All users can read teams.
     * @path /teams/{teamId}
     * @allow (get, list) - Any user can read team data.
     * @deny (create, update, delete) - No user can create, update, or delete team data.
     * @principle Allows public read access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
    }

    /**
     * @description Controls access to news articles. All users can read news articles.
     * @path /news/{newsId}
     * @allow (get, list) - Any user can read news articles.
     * @deny (create, update, delete) - Only authenticated admins can create, update, or delete news articles.
     * @principle Allows public read access; restricts writes to admins only.
     */
    match /news/{newsId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }
      function isExistingAdmin() {
        return isAdmin() && resource != null;
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to admin profiles.
     * @path /admins/{adminId}
     * @allow (get) - Anyone can get admin profiles.
     * @allow (list) - Admins can be listed.
     * @deny (create, update, delete) - No user can create, update, or delete admin profiles directly.
     * @principle Restricts management of admin profiles.
     */
    match /admins/{adminId} {
        function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(adminId) {
        return request.auth.uid == adminId;
      }
       function isExistingOwner(adminId) {
        return isOwner(adminId) && resource != null;
      }
      allow get: if true;
      allow list: if true; // In prototyping mode, allowing listing to verify admin setup.
    }
  }
}