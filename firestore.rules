/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization by implementing a strict
 * user-ownership model for user-specific data and public read access for
 * shared data like competitions, teams, matches, and news. Write access to public
 * data is restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user profiles. Only the authenticated user
 *   can read and write their own profile.
 * - /competitions/{competitionId}: Publicly accessible competition data. Write
 *   access is not granted.
 * - /teams/{teamId}: Publicly accessible team data. Write access is not granted.
 * - /matches/{matchId}: Publicly accessible match data. Write access is not granted.
 * - /news/{newsId}: Publicly accessible news articles. Write access is not granted.
 * - /admins/{adminId}: Stores admin user data. Write access is not granted.
 * - /users/{userId}/favorites/data: Stores user's favorite teams and competitions.
 *   Only the authenticated user can read and write their own favorites.
 * - /predictions/{fixtureId}: Matches available for prediction. Publicly readable,
 *   but write access is not defined.
 * - /predictions/{fixtureId}/userPredictions/{userId}: User predictions for a specific match.
 *   Only the authenticated user can write their own predictions.
 * - /leaderboard/{userId}: Stores the aggregated prediction scores for each user.
 *   Write access is not granted.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted to collections like competitions, teams, matches,
 *   and news to allow all users to view this data without authentication.
 * - Write access to public collections is denied to prevent unauthorized modifications.
 * - Strict ownership is enforced for user profiles and favorites, ensuring that
 *   users can only access their own data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User 'test_user' with id matching {userId} can create their profile.
     * @allow (get) User 'test_user' with id matching {userId} can get their profile.
     * @allow (update) User 'test_user' with id matching {userId} can update their profile.
     * @allow (delete) User 'test_user' with id matching {userId} can delete their profile.
     * @deny (create) User 'test_user' with id not matching {userId} cannot create this profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Stores competition data. Publicly accessible for reading. Write operations are not allowed.
     * @path /competitions/{competitionId}
     * @allow (get) Any user can read competition data.
     * @allow (list) Any user can list competitions.
     * @deny (create) No one can create competition documents.
     * @deny (update) No one can update competition documents.
     * @deny (delete) No one can delete competition documents.
     * @principle Allows public read access to competitions.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores team data. Publicly accessible for reading. Write operations are not allowed.
     * @path /teams/{teamId}
     * @allow (get) Any user can read team data.
     * @allow (list) Any user can list teams.
     * @deny (create) No one can create team documents.
     * @deny (update) No one can update team documents.
     * @deny (delete) No one can delete team documents.
     * @principle Allows public read access to teams.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores match data. Publicly accessible for reading. Write operations are not allowed.
     * @path /matches/{matchId}
     * @allow (get) Any user can read match data.
     * @allow (list) Any user can list matches.
     * @deny (create) No one can create match documents.
     * @deny (update) No one can update match documents.
     * @deny (delete) No one can delete match documents.
     * @principle Allows public read access to matches.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores news articles. Publicly accessible for reading. Write operations are not allowed.
     * @path /news/{newsId}
     * @allow (get) Any user can read news articles.
     * @allow (list) Any user can list news articles.
     * @deny (create) No one can create news documents.
     * @deny (update) No one can update news documents.
     * @deny (delete) No one can delete news documents.
     * @principle Allows public read access to news.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores admin user data. Read and write operations are not allowed.
     * @path /admins/{adminId}
     * @deny (get) No one can get admin data.
     * @deny (list) No one can list admins.
     * @deny (create) No one can create admin documents.
     * @deny (update) No one can update admin documents.
     * @deny (delete) No one can delete admin documents.
     * @principle Restricts access to admin data.
     */
    match /admins/{adminId} {
      allow get, list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores user's favorite teams and competitions. Only the authenticated user can read and write their own favorites.
     * @path /users/{userId}/favorites/data
     * @allow (create) User 'test_user' with id matching {userId} can create their favorites data.
     * @allow (get) User 'test_user' with id matching {userId} can get their favorites data.
     * @allow (update) User 'test_user' with id matching {userId} can update their favorites data.
     * @allow (delete) User 'test_user' with id matching {userId} can delete their favorites data.
     * @deny (create) User 'test_user' with id not matching {userId} cannot create this favorites data.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/favorites/data {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Admin-pinned matches available for user predictions. Publicly readable.
     * @path /predictions/{fixtureId}
     * @allow (get) Any user can read predictions.
     * @allow (list) Any user can list predictions.
     * @deny (create) No one can create prediction documents.
     * @deny (update) No one can update prediction documents.
     * @deny (delete) No one can delete prediction documents.
     * @principle Allows public read access to predictions.
     */
    match /predictions/{fixtureId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores an individual user's prediction for a specific match.
     * @path /predictions/{fixtureId}/userPredictions/{userId}
     * @allow (create) User 'test_user' with id matching {userId} can create their prediction.
     * @allow (get) User 'test_user' with id matching {userId} can get their prediction.
     * @allow (update) User 'test_user' with id matching {userId} can update their prediction.
     * @allow (delete) User 'test_user' with id matching {userId} can delete their prediction.
     * @deny (create) User 'test_user' with id not matching {userId} cannot create this prediction.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /predictions/{fixtureId}/userPredictions/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Stores the aggregated prediction scores for each user.
     * @path /leaderboard/{userId}
     *  @deny (get) No one can get leaderboard data.
     *  @deny (list) No one can list leaderboard data.
     * @deny (create) No one can create leaderboard documents.
     * @deny (update) No one can update leaderboard documents.
     * @deny (delete) No one can delete leaderboard documents.
     */
    match /leaderboard/{userId} {
       allow get, list: if false;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }
  }
}