/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, role-based access control model.
 * User-specific data is protected by strict ownership rules, while
 * admin-managed content is governed by admin role verification. Data is
 * structured to minimize complex queries and enforce data consistency.
 *
 * Data Structure:
 * - `/users/{userId}`: User profile information, accessible only to the user.
 * - `/competitions/{competitionId}`, `/teams/{teamId}`, `/matches/{matchId}`,
 *   `/news/{newsId}`: Publicly readable data. Create/Update/Delete operations
 *   are restricted to admins.
 * - `/admins/{adminId}`: Admin user data. Only admins can manage other admins.
 * - `/users/{userId}/favorites`: User's favorite teams and competitions,
 *   accessible only to the user.
 * - `/topCompetitions/{competitionId}`, `/topTeams/{teamId}`: Top competitions and
 *    teams marked by admins.
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the authenticated user.
 * - Admins are managed through the `/admins/{adminId}` collection.
 * - Read access to competitions, teams, matches, and news is public.
 * - List operations are generally allowed for public collections but restricted
 *   for user-specific data.
 * - Validation: Rules will validate relationships (e.g., ensuring a user ID
 *   in `/users/{userId}/favorites` matches the `userId` in the path). Data types
 *   are NOT strictly enforced in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of a document in `/admins/{adminId}`.
 *   This avoids the need to store admin roles within user documents.
 *
 * Structural Segregation:
 * - Private user data is stored under the `/users/{userId}` path, separate from
 *   publicly accessible data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (create, update, delete) - Any other user tries to access this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Anyone can read competition data.
     * @allow (create, update, delete) - Only admins can modify competition data.
     * @deny (create, update, delete) - Non-admins cannot modify competition data.
     * @principle Public read, admin-only write.
     */
    match /competitions/{competitionId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to team data.
     * @path /teams/{teamId}
     * @allow (get, list) - Anyone can read team data.
     * @allow (create, update, delete) - Only admins can modify team data.
     * @deny (create, update, delete) - Non-admins cannot modify team data.
     * @principle Public read, admin-only write.
     */
    match /teams/{teamId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) - Anyone can read match data.
     * @deny (create, update, delete) - No one can modify match data.
     * @principle Public read, no write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to news articles.
     * @path /news/{newsId}
     * @allow (get, list) - Anyone can read news articles.
     * @allow (create, update, delete) - Only admins can modify news articles.
     * @deny (create, update, delete) - Non-admins cannot modify news articles.
     * @principle Public read, admin-only write.
     */
    match /news/{newsId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to admin user data.
     * @path /admins/{adminId}
     * @allow (create, update, delete) - Only admins can manage other admins.
     * @deny (get, list) - Normal users cannot read admin data.
     * @principle Admin-only access.
     */
    match /admins/{adminId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to user's favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (create, get, list, update, delete) - Only the user can read/write their own favorites.
     * @deny (create, get, list, update, delete) - Other users cannot access.
     * @principle Enforces document ownership for user favorites.
     */
    match /users/{userId}/favorites {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && request.resource.data.userId == resource.data.userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to top competition data.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) - Anyone can read top competition data.
     * @allow (create, update, delete) - Only admins can modify top competition data.
     * @deny (create, update, delete) - Non-admins cannot modify top competition data.
     * @principle Public read, admin-only write.
     */
    match /topCompetitions/{competitionId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to top team data.
     * @path /topTeams/{teamId}
     * @allow (get, list) - Anyone can read top team data.
     * @allow (create, update, delete) - Only admins can modify top team data.
     * @deny (create, update, delete) - Non-admins cannot modify top team data.
     * @principle Public read, admin-only write.
     */
    match /topTeams/{teamId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to league customizations.
     * @path /leagueCustomizations/{leagueId}
     * @allow (get, list) - Anyone can read league customizations.
     * @allow (create, update, delete) - Only admins can modify league customizations.
     * @deny (create, update, delete) - Non-admins cannot modify league customizations.
     * @principle Public read, admin-only write.
     */
    match /leagueCustomizations/{leagueId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to team customizations.
     * @path /teamCustomizations/{teamId}
     * @allow (get, list) - Anyone can read team customizations.
     * @allow (create, update, delete) - Only admins can modify team customizations.
     * @deny (create, update, delete) - Non-admins cannot modify team customizations.
     * @principle Public read, admin-only write.
     */
    match /teamCustomizations/{teamId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to player customizations.
     * @path /playerCustomizations/{playerId}
     * @allow (get, list) - Anyone can read player customizations.
     * @allow (create, update, delete) - Only admins can modify player customizations.
     * @deny (create, update, delete) - Non-admins cannot modify player customizations.
     * @principle Public read, admin-only write.
     */
    match /playerCustomizations/{playerId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to continent customizations.
     * @path /continentCustomizations/{continentId}
     * @allow (get, list) - Anyone can read continent customizations.
     * @allow (create, update, delete) - Only admins can modify continent customizations.
     * @deny (create, update, delete) - Non-admins cannot modify continent customizations.
     * @principle Public read, admin-only write.
     */
    match /continentCustomizations/{continentId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to country customizations.
     * @path /countryCustomizations/{countryId}
     * @allow (get, list) - Anyone can read country customizations.
     * @allow (create, update, delete) - Only admins can modify country customizations.
     * @deny (create, update, delete) - Non-admins cannot modify country customizations.
     * @principle Public read, admin-only write.
     */
    match /countryCustomizations/{countryId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Controls access to pinned Iraqi matches data.
     * @path /pinnedIraqiMatches/{matchId}
     * @allow (get, list) - Anyone can read pinned Iraqi matches data.
     * @allow (create, update, delete) - Only admins can modify pinned Iraqi matches data.
     * @deny (create, update, delete) - Non-admins cannot modify pinned Iraqi matches data.
     * @principle Public read, admin-only write.
     */
    match /pinnedIraqiMatches/{matchId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}