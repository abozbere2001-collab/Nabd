/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read with owner-write patterns.
 * User-specific data (e.g., user profiles, favorites, user predictions) is strictly controlled
 * by the owning user. Public data (e.g., competitions, teams, matches, news, predictions) is
 * generally readable by all, but writable only by authorized users (admins or the original author).
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /competitions/{competitionId}: Competition data.
 * - /teams/{teamId}: Team data.
 * - /matches/{matchId}: Match data.
 * - /news/{newsId}: News articles.
 * - /admins/{adminId}: Admin user data.
 * - /users/{userId}/favorites/data: User's favorite teams and competitions.
 * - /predictions/{fixtureId}: Admin-pinned matches available for user predictions. Publicly readable.
 * - /predictions/{fixtureId}/userPredictions/{userId}: Individual user's prediction for a specific match.
 * - /leaderboard/{userId}: Aggregated prediction scores for each user.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Competitions, teams, matches, and news are publicly readable.
 * - Only admins can create/update/delete admins.
 * - Users can only read/write their own favorites data.
 * - Only admins can create/update/delete predictions.
 *
 * Denormalization for Authorization:
 * To simplify rules, we rely on the `authorId` field in the `news` collection to determine ownership.
 *
 * Structural Segregation:
 * The application uses separate collections for public data (e.g., competitions, teams, matches, news) and private user data (e.g., user profiles, favorites).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read/write their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_abc' cannot create a profile at /users/user_xyz.
     * @deny (update, delete) - User with UID 'user_abc' cannot modify the profile at /users/user_xyz.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data.id == userId;
      }

      allow get: if true;
      allow list: if false; // Users should not be able to list all user profiles.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId); //Enforce immutability on the user id
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Any user can read competition data.
     * @deny (create, update, delete) - No one can create, update, or delete competition data.
     * @principle Allows public read access.
     */
    match /competitions/{competitionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read team data.
     * @path /teams/{teamId}
     * @allow (get, list) - Any user can read team data.
     * @deny (create, update, delete) - No one can create, update, or delete team data.
     * @principle Allows public read access.
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read match data.
     * @path /matches/{matchId}
     * @allow (get, list) - Any user can read match data.
     * @deny (create, update, delete) - No one can create, update, or delete match data.
     * @principle Allows public read access.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read news articles, but only the author can modify them.
     * @path /news/{newsId}
     * @allow (get, list) - Any user can read news articles.
     * @allow (create) - User with UID 'admin_abc' can create a news article with authorId 'admin_abc'.
     * @allow (update, delete) - User with UID 'admin_abc' can update/delete their own news article.
     * @deny (create) - User with UID 'user_xyz' cannot create a news article with authorId 'admin_abc'.
     * @deny (update, delete) - User with UID 'user_xyz' cannot modify news article created by 'admin_abc'.
     * @principle Allows public read access with owner-only writes.
     */
    match /news/{newsId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }

      function isExistingOwner() {
          return isSignedIn() && resource.data.authorId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Allows only admins to manage other admins.
     * @path /admins/{adminId}
     * @allow (get, list) - Any user can read admin data.
     * @deny (create, update, delete) - Only admins can create, update, or delete admin data.
     * @principle Restricts admin management to admins.
     */
    match /admins/{adminId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        // In a real application, you would likely check for an admin role
        // stored in a custom claim or a dedicated admin collection.
        // This is a placeholder and should be replaced with actual admin check logic.
        return false;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows users to read and write their own favorites data.
     * @path /users/{userId}/favorites/data
     * @allow (create) - User with UID 'user_abc' can create their favorites data at /users/user_abc/favorites/data.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read/write their favorites data at /users/user_abc/favorites/data.
     * @deny (create) - User with UID 'user_abc' cannot create favorites data at /users/user_xyz/favorites/data.
     * @deny (update, delete) - User with UID 'user_abc' cannot modify favorites data at /users/user_xyz/favorites/data.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/favorites/data {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner() {
          return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Only the owner can access this document.
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Allows anyone to read prediction data. Only admins can modify.
     * @path /predictions/{fixtureId}
     * @allow (get, list) - Any user can read prediction data.
     * @deny (create, update, delete) - Only admins can create, update, or delete prediction data.
     * @principle Allows public read access with admin-only writes.
     */
    match /predictions/{fixtureId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        // Placeholder: Replace with actual admin role check.
        return false;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows users to read and write their own prediction for a match.
     * @path /predictions/{fixtureId}/userPredictions/{userId}
     * @allow (create) - User with UID 'user_abc' can create their prediction at /predictions/{fixtureId}/userPredictions/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can read/write their prediction at /predictions/{fixtureId}/userPredictions/user_abc.
     * @deny (create) - User with UID 'user_abc' cannot create a prediction at /predictions/{fixtureId}/userPredictions/user_xyz.
     * @deny (update, delete) - User with UID 'user_abc' cannot modify the prediction at /predictions/{fixtureId}/userPredictions/user_xyz.
     * @principle Enforces document ownership for writes.
     */
    match /predictions/{fixtureId}/userPredictions/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner() {
          return isSignedIn() && resource.data.userId == request.auth.uid;
      }
        allow get: if isOwner(userId);
        allow list: if false; //Owners can list their own predictions, potentially for debugging
        allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
        allow update: if isExistingOwner();
        allow delete: if isExistingOwner();
    }

        /**
     * @description Allows anyone to read leaderboard data.
     * @path /leaderboard/{userId}
     * @allow (get, list) - Any user can read leaderboard data.
     * @deny (create, update, delete) - No one can create, update, or delete leaderboard data.
     * @principle Allows public read access.
     */
    match /leaderboard/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}