/**
 * @fileoverview Firestore Security Rules for GoalStack app.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access.
 * User data is strictly controlled by the owning user.
 * Public data (competitions, teams, matches, news) is read-only for all users
 * and writeable only by admins.
 *
 * Data Structure:
 * - `/users/{userId}`: User profile data, accessible only to the owning user.
 * - `/competitions/{competitionId}`, `/teams/{teamId}`, `/matches/{matchId}`, `/news/{newsId}`:
 *   Publicly readable data, manageable only by admins.
 * - `/admins/{adminId}`: Admin user data; existence implies admin status.
 * - `/users/{userId}/favorites`: User's favorite teams and competitions.
 *
 * Key Security Decisions:
 * - No user listing is allowed.
 * - Admin status is determined by the existence of an admin document.
 * - Public data is truly public for reads but strictly admin-controlled for writes.
 *
 * Denormalization for Authorization:
 *   Admin privileges are determined by the existence of a document under `/admins/{adminId}`.
 *   This avoids complex queries and ensures efficient rule evaluation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by an existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of their admin document.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner.
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /competitions/{competitionId} documents.
     * @path /competitions/{competitionId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) only to admins.
     * @principle Public read access, admin-only write access.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /teams/{teamId} documents.
     * @path /teams/{teamId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) only to admins.
     * @principle Public read access, admin-only write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /matches/{matchId} documents.
     * @path /matches/{matchId}
     * @allow (get, list) to everyone.
     * @deny (create, update, delete) to everyone.
     * @principle Public read access, no write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for /news/{newsId} documents.
     * @path /news/{newsId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) only to admins.
     * @principle Public read access, admin-only write access.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /admins/{adminId} documents.
     * @path /admins/{adminId}
     * @deny (get, list) to non-admins.
     * @allow (create, update, delete) only to admins.
     * @principle Admin-only access.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /users/{userId}/favorites documents.
     * @path /users/{userId}/favorites
     * @allow (get, create, update, delete) if the user is the owner.
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favorites {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
	   /**
     * @description Rules for /topCompetitions/{competitionId} documents.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) only to admins.
     * @principle Public read access, admin-only write access.
     */
    match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /topTeams/{teamId} documents.
     * @path /topTeams/{teamId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) only to admins.
     * @principle Public read access, admin-only write access.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
      /**
     * @description Rules for /leagueCustomizations/{leagueId} documents.
     * @path /leagueCustomizations/{leagueId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) only to admins.
     * @principle Public read access, admin-only write access.
     */
    match /leagueCustomizations/{leagueId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /teamCustomizations/{teamId} documents.
     * @path /teamCustomizations/{teamId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) only to admins.
     * @principle Public read access, admin-only write access.
     */
    match /teamCustomizations/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /playerCustomizations/{playerId} documents.
     * @path /playerCustomizations/{playerId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) only to admins.
     * @principle Public read access, admin-only write access.
     */
    match /playerCustomizations/{playerId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
        /**
     * @description Rules for /continentCustomizations/{continentId} documents.
     * @path /continentCustomizations/{continentId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) only to admins.
     * @principle Public read access, admin-only write access.
     */
    match /continentCustomizations/{continentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /countryCustomizations/{countryId} documents.
     * @path /countryCustomizations/{countryId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) only to admins.
     * @principle Public read access, admin-only write access.
     */
    match /countryCustomizations/{countryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Rules for /pinnedIraqiMatch/special documents.
     * @path /pinnedIraqiMatch/special
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) only to admins.
     * @principle Public read access, admin-only write access.
     */
    match /pinnedIraqiMatch/special {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}