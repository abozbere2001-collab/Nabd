/**
 * @file Firestore Security Rules for Goal Stack Application
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data,
 *  public read access for shared entities (competitions, teams, matches, news),
 *  and admin-only write access for administrative content.
 * @data_structure Data is organized into top-level collections for shared entities
 *  (/competitions, /teams, /matches, /news) and user-specific subcollections
 *  under /users/{userId} for private data (favorites). Admin status is determined
 *  by the presence of a document in /admins/{adminId}.
 * @key_security_decisions
 *   - Users can only access their own data under /users/{userId}.
 *   - Competitions, teams, matches, and news are publicly readable.
 *   - Only admins can create, update, or delete competitions, teams, and news.
 *   - Listing of admins is explicitly denied.
 * @denormalization Data required for authorization (e.g., ownership) is denormalized
 *   directly onto the documents to avoid costly `get()` calls within the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *   Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their profile.
     *   Request: auth.uid = 'user123'
     * @deny (create) - User with ID 'user456' cannot create a profile for user 'user123'.
     *   Request: auth.uid = 'user456', resource.data.id = 'user123'
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the profile of user 'user123'.
     *   Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants public read access to competitions and restricts write access to admins only.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Any user can read a competition.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a competition.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a competition.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Public read access with admin-only writes.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to teams and restricts write access to admins only.
     * @path /teams/{teamId}
     * @allow (get, list) - Any user can read a team.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a team.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a team.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Public read access with admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to matches. Write access is denied.
     * @path /matches/{matchId}
     * @allow (get, list) - Any user can read a match.
     * @deny (create, update, delete) - No user can create, update, or delete a match.
     * @principle Public read access, no write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to news articles and restricts write access to admins only.
     * @path /news/{newsId}
     * @allow (get, list) - Any user can read a news article.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a news article.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a news article.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Public read access with admin-only writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts access to admin documents. Only admins can create, update, or delete other admin documents. Regular users cannot read.
     * @path /admins/{adminId}
     * @deny (get, list) - No user can read or list admin documents.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete other admin documents.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete admin documents.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Admin-only access.
     */
    match /admins/{adminId} {
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to user-specific favorites data.
     * @path /users/{userId}/favorites
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their own favorites.
     *   Request: auth.uid = 'user123'
     * @allow (create) - User with ID 'user123' can create their own favorites.
     *   Request: auth.uid = 'user123'
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the favorites of user 'user123'.
     *   Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favorites/{favoriteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
	  /**
     * @description Grants public read access to top competitions and restricts write access to admins only.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) - Any user can read a top competition.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a top competition.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a top competition.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Public read access with admin-only writes.
     */
    match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to top teams and restricts write access to admins only.
     * @path /topTeams/{teamId}
     * @allow (get, list) - Any user can read a top team.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a top team.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a top team.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Public read access with admin-only writes.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts write access to league customizations to admins only.  Read access is denied.
     * @path /leagueCustomizations/{leagueId}
     * @deny (get, list) - No user can read or list league customizations.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a league customization.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a league customization.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Admin-only access.
     */
    match /leagueCustomizations/{leagueId} {
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts write access to team customizations to admins only. Read access is denied.
     * @path /teamCustomizations/{teamId}
     * @deny (get, list) - No user can read or list team customizations.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a team customization.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a team customization.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Admin-only access.
     */
    match /teamCustomizations/{teamId} {
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts write access to player customizations to admins only. Read access is denied.
     * @path /playerCustomizations/{playerId}
     * @deny (get, list) - No user can read or list player customizations.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a player customization.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a player customization.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Admin-only access.
     */
    match /playerCustomizations/{playerId} {
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts write access to match customizations to admins only. Read access is denied.
     * @path /matchCustomizations/{fixtureId}
     * @deny (get, list) - No user can read or list match customizations.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a match customization.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a match customization.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Admin-only access.
     */
    match /matchCustomizations/{fixtureId} {
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts write access to continent customizations to admins only. Read access is denied.
     * @path /continentCustomizations/{continentId}
     * @deny (get, list) - No user can read or list continent customizations.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a continent customization.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a continent customization.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Admin-only access.
     */
    match /continentCustomizations/{continentId} {
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts write access to country customizations to admins only. Read access is denied.
     * @path /countryCustomizations/{countryId}
     * @deny (get, list) - No user can read or list country customizations.
     * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a country customization.
     *   Request: auth.uid = 'admin123', /admins/admin123 exists
     * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a country customization.
     *   Request: auth.uid = 'user123', /admins/user123 does not exist
     * @principle Admin-only access.
     */
    match /countryCustomizations/{countryId} {
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
       /**
        * @description Controls access to pinned Iraqi matches, allowing only admins to manage them. Public read access is denied.
        * @path /pinnedIraqiMatches/{matchId}
        * @deny (get, list) - No user can read or list pinned matches.
        * @allow (create, update, delete) - Admin user 'admin123' can create, update, and delete a pinned match.
        *   Request: auth.uid = 'admin123', /admins/admin123 exists
        * @deny (create, update, delete) - Non-admin user 'user123' cannot create, update, or delete a pinned match.
        *   Request: auth.uid = 'user123', /admins/user123 does not exist
        * @principle Admin-only access to manage pinned matches.
        */
       match /pinnedIraqiMatches/{matchId} {
         allow get, list: if false;
         allow create: if isAdmin();
         allow update: if isAdmin();
         allow delete: if isAdmin();
       }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
  }
}