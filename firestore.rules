/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access.
 * User-specific data is stored under `/users/{userId}` and is accessible only to the
 * authenticated user. Shared entities like competitions, teams, and matches are
 * publicly readable. Admin users, identified by the existence of a document in the
 * `/admins/{adminId}` collection, have create, update, and delete privileges on
 * certain collections like `/competitions`, `/teams`, and `/news`.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information. Only the user can read/write their own profile.
 * - `/competitions/{competitionId}`: Stores competition data. Publicly readable, but only admins can modify.
 * - `/teams/{teamId}`: Stores team data. Publicly readable, but only admins can modify.
 * - `/matches/{matchId}`: Stores match data. Publicly readable.
 * - `/news/{newsId}`: Stores news articles. Publicly readable, but only admins can modify.
 * - `/admins/{adminId}`: Stores admin user data. Only admins can manage other admins.
 * - `/users/{userId}/favorites/data`: Stores user's favorite teams and competitions. Only the user can read/write their own favorites.
 * - `/topCompetitions/{competitionId}`: Stores top competitions marked by admins. Publicly readable, but only admins can modify.
 * - `/topTeams/{teamId}`: Stores top teams marked by admins. Publicly readable, but only admins can modify.
 * - `/leagueCustomizations/{leagueId}`: Stores custom names for leagues set by admins. Only admins can modify.
 * - `/teamCustomizations/{teamId}`: Stores custom names for teams set by admins. Only admins can modify.
 * - `/playerCustomizations/{playerId}`: Stores custom names for players set by admins. Only admins can modify.
 * - `/matchCustomizations/{fixtureId}`: Stores custom status for matches set by admins. Only admins can modify.
 * - `/continentCustomizations/{continentId}`: Stores custom names for continents set by admins. Only admins can modify.
 * - `/countryCustomizations/{countryId}`: Stores custom names for countries set by admins. Only admins can modify.
 * - `/pinnedIraqiMatches/{matchId}`: Stores details of pinned Iraqi matches, managed by admins. Only admins can modify.
 *
 * Key Security Decisions:
 * - Users can only access their own data under `/users/{userId}`.
 * - Admins are identified by the presence of a document in `/admins/{adminId}`.
 * - Listing users is not allowed.
 * - Most data is publicly readable to support the application's core functionality.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Authentication required for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the userId.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Checks for both ownership and document existence.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin, based on the existence of a document in /admins/{adminId}.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Checks for admin status.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (get, list) User with ID 'user123' reads their own profile.
     * @allow (create) User with ID 'user123' creates their own profile.
     * @allow (update) User with ID 'user123' updates their own profile.
     * @allow (delete) User with ID 'user123' deletes their own profile.
     * @deny (get, list) User with ID 'user456' tries to read profile of 'user123'.
     * @deny (create) User with ID 'user456' tries to create profile for 'user123'.
     * @deny (update) User with ID 'user456' tries to update profile of 'user123'.
     * @deny (delete) User with ID 'user456' tries to delete profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) Any user reads competition data.
     * @allow (create) Admin user creates competition data.
     * @allow (update) Admin user updates competition data.
     * @allow (delete) Admin user deletes competition data.
     * @deny (create) Non-admin user tries to create competition data.
     * @deny (update) Non-admin user tries to update competition data.
     * @deny (delete) Non-admin user tries to delete competition data.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages team data.
     * @path /teams/{teamId}
     * @allow (get, list) Any user reads team data.
     * @allow (create) Admin user creates team data.
     * @allow (update) Admin user updates team data.
     * @allow (delete) Admin user deletes team data.
     * @deny (create) Non-admin user tries to create team data.
     * @deny (update) Non-admin user tries to update team data.
     * @deny (delete) Non-admin user tries to delete team data.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages match data.
     * @path /matches/{matchId}
     * @allow (get, list) Any user reads match data.
     * @deny (create) Any user tries to create match data.
     * @deny (update) Any user tries to update match data.
     * @deny (delete) Any user tries to delete match data.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages news articles.
     * @path /news/{newsId}
     * @allow (get, list) Any user reads news articles.
     * @allow (create) Admin user creates news articles.
     * @allow (update) Admin user updates news articles.
     * @allow (delete) Admin user deletes news articles.
     * @deny (create) Non-admin user tries to create news articles.
     * @deny (update) Non-admin user tries to update news articles.
     * @deny (delete) Non-admin user tries to delete news articles.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages admin user data.
     * @path /admins/{adminId}
     * @allow (get, list) Not allowed.
     * @allow (create) Only admins can create other admins.
     * @allow (update) Only admins can update other admins.
     * @allow (delete) Only admins can delete other admins.
     * @deny (get, list) Non-admin user tries to read admin data.
     * @deny (create) Non-admin user tries to create admin data.
     * @deny (update) Non-admin user tries to update admin data.
     * @deny (delete) Non-admin user tries to delete admin data.
     * @principle Restricts access to admin management to admins only.
     */
    match /admins/{adminId} {
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages user's favorite teams and competitions.
     * @path /users/{userId}/favorites/data
     * @allow (get, list) User with ID 'user123' reads their own favorites.
     * @allow (create) User with ID 'user123' creates their own favorites.
     * @allow (update) User with ID 'user123' updates their own favorites.
     * @allow (delete) User with ID 'user123' deletes their own favorites.
     * @deny (get, list) User with ID 'user456' tries to read favorites of 'user123'.
     * @deny (create) User with ID 'user456' tries to create favorites for 'user123'.
     * @deny (update) User with ID 'user456' tries to update favorites of 'user123'.
     * @deny (delete) User with ID 'user456' tries to delete favorites of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favorites/data {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    /**
     * @description Manages top competition data.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) Any user reads top competition data.
     * @allow (create) Admin user creates top competition data.
     * @allow (update) Admin user updates top competition data.
     * @allow (delete) Admin user deletes top competition data.
     * @deny (create) Non-admin user tries to create top competition data.
     * @deny (update) Non-admin user tries to update top competition data.
     * @deny (delete) Non-admin user tries to delete top competition data.
     * @principle Allows public reads, restricts writes to admins.
     */
     match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Manages top teams data.
     * @path /topTeams/{teamId}
     * @allow (get, list) Any user reads top teams data.
     * @allow (create) Admin user creates top teams data.
     * @allow (update) Admin user updates top teams data.
     * @allow (delete) Admin user deletes top teams data.
     * @deny (create) Non-admin user tries to create top teams data.
     * @deny (update) Non-admin user tries to update top teams data.
     * @deny (delete) Non-admin user tries to delete top teams data.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
     /**
     * @description Stores custom names for leagues set by admins.
     *  @path /leagueCustomizations/{leagueId}
     */
    match /leagueCustomizations/{leagueId} {
        allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Stores custom names for teams set by admins.
     *  @path /teamCustomizations/{teamId}
     */
    match /teamCustomizations/{teamId} {
        allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores custom names for players set by admins.
     *  @path /playerCustomizations/{playerId}
     */
    match /playerCustomizations/{playerId} {
        allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    /**
     * @description Stores custom status for matches set by admins.
     *  @path /matchCustomizations/{fixtureId}
     */
    match /matchCustomizations/{fixtureId} {
        allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    /**
     * @description Stores custom names for continents set by admins.
     *  @path /continentCustomizations/{continentId}
     */
    match /continentCustomizations/{continentId} {
       allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    /**
     * @description Stores custom names for countries set by admins.
     *  @path /countryCustomizations/{countryId}
     */
    match /countryCustomizations/{countryId} {
       allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    /**
     * @description Stores the details of a pinned Iraqi match, managed by an admin.
     * @path /pinnedIraqiMatches/{matchId}
     */
    match /pinnedIraqiMatches/{matchId} {
       allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    /**
     * @description Stores user predictions for specific league matches.
     *  @path /leaguePredictions/{predictionId}
     */
    match /leaguePredictions/{predictionId} {
        allow get, list: if isSignedIn(); // Allow read/list if signed in
        allow create: if isSignedIn(); // Allow create if signed in
        allow update: if false; // Disallow update
        allow delete: if false; // Disallow delete
    }

    /**
     * @description Stores user scores for a specific league leaderboard.
     *  @path /leagueLeaderboards/{leagueId}/users/{userId}
     */
    match /leagueLeaderboards/{leagueId}/users/{userId} {
        allow get: if true; // Allow get for everyone
        allow list: if true; // Allow list for everyone
        allow create: if false; // Disallow create
        allow update: if false; // Disallow update
        allow delete: if false; // Disallow delete
    }
  }
}