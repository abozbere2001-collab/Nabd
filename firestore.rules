/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and favorites,
 *              allows public read access to competitions, teams, matches and news.
 *              Admin documents are read-only and not intended to be managed by the client.
 *              Prediction matches and news are publicly readable but only writable by admins.
 *              User predictions are stored as subcollections under prediction matches and are owner-only writeable.
 *              Leaderboard data is publicly readable but only writeable by a backend process.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user.
 * - /competitions/{competitionId}: Publicly readable competition data.
 * - /teams/{teamId}: Publicly readable team data.
 * - /matches/{matchId}: Publicly readable match data.
 * - /news/{newsId}: Publicly readable news articles, writable only by admins.
 * - /admins/{adminId}: Admin user data, read-only for admins themselves.
 * - /users/{userId}/favorites/data: User's favorite teams and competitions, accessible only by the user.
 * - /predictions/{fixtureId}: Admin-pinned matches available for user predictions, publicly readable.
 * - /predictions/{fixtureId}/userPredictions/{userId}: Individual user's prediction for a specific match, accessible only by the user.
 * - /leaderboard/{userId}: Aggregated prediction scores for each user, publicly readable, writeable by the backend.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Admin documents are read-only and not intended to be managed by the client.
 * - Public read access is granted to competitions, teams, matches, news, prediction matches, and the leaderboard.
 * - User-specific data (profile, favorites, predictions) is strictly controlled via owner-only access.
 *
 * Denormalization for Authorization:
 * - User's `id` is used in the path for user-specific collections to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

        /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId - The user ID to compare with the request's auth UID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines admin role.
     */
    function isAdmin() {
      return false; // TODO: Implement admin check (e.g., read from a collection of admins)
    }


    /**
     * @description Manages access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *        request.auth.uid: 'user123', resource.data.id: 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their profile.
     *        request.auth.uid: 'user123'
     * @deny  (create) User with ID 'user123' cannot create a profile for 'user456'.
     *        request.auth.uid: 'user123', resource.data.id: 'user456'
     * @deny  (get, update, delete) User with ID 'user123' cannot read/update/delete profile 'user456'.
     *        request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) Anyone can read competition data.
     * @deny  (create, update, delete) No one can create, update, or delete competition data.
     * @principle Public read access, no write access.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to team data.
     * @path /teams/{teamId}
     * @allow (get, list) Anyone can read team data.
     * @deny  (create, update, delete) No one can create, update, or delete team data.
     * @principle Public read access, no write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) Anyone can read match data.
     * @deny  (create, update, delete) No one can create, update, or delete match data.
     * @principle Public read access, no write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to news articles.
     * @path /news/{newsId}
     * @allow (get, list) Anyone can read news articles.
     * @deny  (create, update, delete) No one can create, update, or delete news articles.
     * @principle Public read access, write access only for admins.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages access to admin user data.
     * @path /admins/{adminId}
     * @allow (get) Admins can read their own data.
     * @deny (list, create, update, delete) No listing, creation, update, or deletion allowed via the client.
     * @principle Owner-only read access, no write access.
     */
    match /admins/{adminId} {
      allow get: if isOwner(adminId);
      allow list, create, update, delete: if false;
    }

    /**
     * @description Manages access to user's favorite teams and competitions.
     * @path /users/{userId}/favorites/data
     * @allow (create, get, update, delete) User with ID 'user123' can manage their favorites.
     *        request.auth.uid: 'user123'
     * @deny (create, get, update, delete) User with ID 'user123' cannot manage favorites for 'user456'.
     *        request.auth.uid: 'user123'
     * @principle Enforces document ownership, restricts access to a user's own data.
     */
    match /users/{userId}/favorites/data {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Manages access to matches pinned by admins for predictions.
      * @path /predictions/{fixtureId}
      * @allow (get, list) Anyone can read prediction matches.
      * @deny  (create, update, delete) No one can create, update, or delete prediction matches.
      * @principle Public read access, admin-only write access.
      */
    match /predictions/{fixtureId} {
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

        /**
     * @description Manages access to individual user's predictions for a specific match.
     * @path /predictions/{fixtureId}/userPredictions/{userId}
     * @allow (create, get, update, delete) User with ID 'user123' can manage their prediction for fixture 'fixture456'.
     *        request.auth.uid: 'user123'
     * @deny (create, get, update, delete) User with ID 'user123' cannot manage prediction for 'user456' or fixture 'fixture789'.
     *        request.auth.uid: 'user123'
     * @principle Enforces document ownership, restricts access to a user's own data.
     */
    match /predictions/{fixtureId}/userPredictions/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

       /**
        * @description Manages access to leaderboard data.
        * @path /leaderboard/{userId}
        * @allow (get, list) Anyone can read the leaderboard.
        * @deny  (create, update, delete) No one can create, update or delete leaderboard data.
        * @principle Public read access, backend-only write access.
        */
    match /leaderboard/{userId} {
      allow get, list: if true;
      allow create: if false; // Only backend can write.
      allow update: if false; // Only backend can update.
      allow delete: if false; // Only backend can delete.
    }
  }
}