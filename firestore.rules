/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data,
 * allows public read access to competitions, teams, matches and news, and restricts
 * write access to those collections. User favorites are stored under each user's
 * document. Predictions are stored in two levels: pinned matches are publicly readable,
 * while individual user predictions are only accessible by the user themselves.
 * Leaderboard scores are publicly readable but can only be updated by a trusted process.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /competitions/{competitionId}: Competition data.
 * - /teams/{teamId}: Team data.
 * - /matches/{matchId}: Match data.
 * - /news/{newsId}: News articles.
 * - /admins/{adminId}: Admin user data.
 * - /users/{userId}/favorites/data: User's favorite teams and competitions.
 * - /predictions/{fixtureId}: Admin-pinned matches available for user predictions.
 * - /predictions/{fixtureId}/userPredictions/{userId}: User predictions for a specific match.
 * - /leaderboard/{userId}: Aggregated prediction scores for each user.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user document and favorites data.
 * - Competitions, teams, matches and news are publicly readable. Writes are not allowed through the rules.
 * - Individual user predictions are only accessible by the user themselves.
 * - Leaderboard scores are publicly readable, but writes are not allowed through the rules.
 * - Listing of users and admins is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (create, update, get, delete) if request.auth.uid == userId
     * @deny (create, update, get, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Prevent user enumeration

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) if true
     * @deny (create, update, delete) always
     * @principle Public read access for competitions.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to team data.
     * @path /teams/{teamId}
     * @allow (get, list) if true
     * @deny (create, update, delete) always
     * @principle Public read access for teams.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) if true
     * @deny (create, update, delete) always
     * @principle Public read access for matches.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to news articles.
     * @path /news/{newsId}
     * @allow (get, list) if true
     * @deny (create, update, delete) always
     * @principle Public read access for news.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to admin documents.
     * @path /admins/{adminId}
     * @allow (get) if false
     * @allow (list) if false
     * @deny (create, update, delete) always
     * @principle Only accessible server-side.
     */
    match /admins/{adminId} {
      allow get, list: if false; // Prevent admin enumeration
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to read and write their own favorites data.
     * @path /users/{userId}/favorites/data
     * @allow (create, update, get, delete) if request.auth.uid == userId
     * @deny (create, update, get, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for favorites.
     */
    match /users/{userId}/favorites/data {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to prediction matches.
     * @path /predictions/{fixtureId}
     * @allow (get, list) if true
     * @deny (create, update, delete) always
     * @principle Public read access for prediction matches.
     */
    match /predictions/{fixtureId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Allows a user to only read and write their own prediction for a given fixture.
     * @path /predictions/{fixtureId}/userPredictions/{userId}
     * @allow (create, update, get, delete) if request.auth.uid == userId
     * @deny (create, update, get, delete) if request.auth.uid != userId
     * @principle Enforces ownership of user predictions.
     */
    match /predictions/{fixtureId}/userPredictions/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to leaderboard data, but restricts write access.
     * @path /leaderboard/{userId}
     * @allow (get, list) if true
     * @deny (create, update, delete) always
     * @principle Public read access for leaderboard, restricted writes.
     */
    match /leaderboard/{userId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}