/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a strict, role-based access control model.
 * Users can only manage their own data.
 * Admins, identified by their presence in the `/admins` collection, have elevated privileges.
 * Data required for authorization decisions is denormalized directly onto the documents,
 * avoiding costly `get()` calls within the rules.
 *
 * Data Structure:
 * - `/users/{userId}`: User profiles, accessible only by the user.
 * - `/competitions/{competitionId}`: Public competition data, managed by admins.
 * - `/teams/{teamId}`: Public team data, managed by admins.
 * - `/matches/{matchId}`: Public match data.
 * - `/news/{newsId}`: Public news articles, managed by admins.
 * - `/admins/{adminId}`: Admin user profiles; existence determines admin status.
 * - `/users/{userId}/favorites`: User's favorite teams/competitions, accessible only by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public data (competitions, teams, matches, news) is readable by everyone.
 * - Admin status is determined by document existence in the `/admins` collection.
 * - No data validation is performed in this prototype.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *    - Request: auth.uid = 'user123', request.resource.data.id = 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their profile.
     *    - Request: auth.uid = 'user123'
     * @deny (get, update, delete) User with ID 'user456' tries to access profile of user 'user123'.
     *    - Request: auth.uid = 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) Any user can read competition data.
     * @allow (create, update, delete) Admin user can manage competition data.
     *    - Request: User's auth.uid exists as a document ID in /admins.
     * @deny (create, update, delete) Non-admin user tries to manage competition data.
     *    - Request: User's auth.uid does not exist in /admins.
     * @principle Public read, admin-only writes.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to team data.
     * @path /teams/{teamId}
     * @allow (get, list) Any user can read team data.
     * @allow (create, update, delete) Admin user can manage team data.
     *    - Request: User's auth.uid exists as a document ID in /admins.
     * @deny (create, update, delete) Non-admin user tries to manage team data.
     *    - Request: User's auth.uid does not exist in /admins.
     * @principle Public read, admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) Any user can read match data.
     * @deny (create, update, delete) No one can modify the match data.
     * @principle Public read.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to news article data.
     * @path /news/{newsId}
     * @allow (get, list) Any user can read news articles.
     * @allow (create, update, delete) Admin user can manage news articles.
     *    - Request: User's auth.uid exists as a document ID in /admins.
     * @deny (create, update, delete) Non-admin user tries to manage news articles.
     *    - Request: User's auth.uid does not exist in /admins.
     * @principle Public read, admin-only writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to admin user data.
     * @path /admins/{adminId}
     * @allow (create, update, delete) Only existing admin users can create, update, or delete other admin user.
     *    - Request: User's auth.uid exists as a document ID in /admins.
     * @deny (get, list) Normal users cannot read admin user data.
     * @principle Admin-only access.
     */
    match /admins/{adminId} {
      allow get, list: if false;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to user's favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (create) User with ID 'user123' creates their favorites.
     *    - Request: auth.uid = 'user123', request.resource.data.userId = 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their favorites.
     *    - Request: auth.uid = 'user123'
     * @deny (get, update, delete) User with ID 'user456' tries to access favorites of user 'user123'.
     *    - Request: auth.uid = 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/favorites {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}