/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to certain collections. All write operations
 * are protected by authorization checks to ensure data integrity and prevent
 * unauthorized modifications.
 *
 * Data Structure:
 * - User profiles and related data are stored under `/users/{userId}`.
 * - Public data like admin favorites and match details are stored in top-level collections.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Admin-managed competitions are publicly readable.
 * - Listing of notifications is only allowed for the owner.
 *
 * Denormalization for Authorization:
 *  - The `Prediction` entity requires a `userId` to match the authenticated user, ensuring users can only create predictions for themselves.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId in the document data.
     * @allow (get, update, delete) - Authenticated user with a matching userId.
     * @deny (create, update, delete) - Any other user attempting to modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.email == request.auth.token.email && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) - Authenticated user creating a notification for themselves.
     * @allow (get, list, update, delete) - Authenticated user accessing their own notifications.
     * @deny (create, update, delete) - Any other user attempting to modify another user's notifications.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.recipientId == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.recipientId == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own favorites.
     * @path /favorites/{userId}
     * @allow (create) - Authenticated user creating their own favorites document.
     * @allow (get, update, delete) - Authenticated user accessing their own favorites.
     * @deny (create, update, delete) - Any other user attempting to modify another user's favorites.
     * @principle Restricts access to a user's own data.
     */
    match /favorites/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows admins to manage favorited teams. Publicly readable.
     * @path /adminFavorites/{teamId}
     * @allow (get, list) - Any user can read the list of admin favorites.
     * @deny (create, update, delete) - Only admins should be able to modify this data.
     * @principle Public read access with restricted writes.
     */
    match /adminFavorites/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Allows users to store custom league names.
     * @path /leagueCustomizations/{leagueId}
     * @allow (create, update, delete) - Authenticated user.
     * @principle User-specific data access.
     */
    match /leagueCustomizations/{leagueId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows users to store custom country names.
     * @path /countryCustomizations/{countryName}
     * @allow (create, update, delete) - Authenticated user.
     * @principle User-specific data access.
     */
    match /countryCustomizations/{countryName} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows users to store custom continent names.
     * @path /continentCustomizations/{continentName}
     * @allow (create, update, delete) - Authenticated user.
     * @principle User-specific data access.
     */
    match /continentCustomizations/{continentName} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows users to store custom team names.
     * @path /teamCustomizations/{teamId}
     * @allow (create, update, delete) - Authenticated user.
     * @principle User-specific data access.
     */
    match /teamCustomizations/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows users to store custom player names.
     * @path /playerCustomizations/{playerId}
     * @allow (create, update, delete) - Authenticated user.
     * @principle User-specific data access.
     */
    match /playerCustomizations/{playerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows users to store custom coach names.
     * @path /coachCustomizations/{coachId}
     * @allow (create, update, delete) - Authenticated user.
     * @principle User-specific data access.
     */
    match /coachCustomizations/{coachId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read access to match details, but restricts writes.
     * @path /matches/{matchId}
     * @allow (get, list) - Any user can read match details.
     * @deny (create, update, delete) - Only admins should be able to modify match details.
     * @principle Public read access with restricted writes.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Allows users to create, read, update, and delete comments on matches.
     * @path /matches/{matchId}/comments/{commentId}
     * @allow (create) - Authenticated user creating a comment.
     * @allow (get, list) - Any user can read comments.
     * @allow (update, delete) - Only the owner of the comment can modify it.
     * @principle Allows public reads and owner-only writes for comments.
     */
    match /matches/{matchId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(resource.data.userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Allows read access to managed competitions, but restricts writes.
     * @path /managedCompetitions/{leagueId}
     * @allow (get, list) - Any user can read managed competitions.
     * @deny (create, update, delete) - Only admins should be able to modify this data.
     */
    match /managedCompetitions/{leagueId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Allows users to manage their own predictions.
     * @path /predictions/{predictionId}
     * @allow (create) - Authenticated user creating a prediction for themselves.
     * @allow (get, update, delete) - Authenticated user accessing their own prediction.
     * @deny (create, update, delete) - Any other user attempting to modify another user's prediction.
     * @principle Restricts access to a user's own data.
     */
    match /predictions/{predictionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(resource.data.userId) && resource != null;
      }

      allow get: if isExistingOwner(request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(request.auth.uid) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(request.auth.uid);
    }
    
    /**
     * @description Allows read and write access to leaderboard entries for each user.
     * @path /leaderboard/{userId}
     */
    match /leaderboard/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Allows admins to manage global prediction matches for a given day. Publicly readable.
     * @path /dailyGlobalPredictions/{date}
     * @allow (get, list) - Any user can read the global prediction matches.
     * @deny (create, update, delete) - Only admins should be able to modify this data.
     * @principle Public read access with restricted writes.
     */
    match /dailyGlobalPredictions/{date} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }
  }
}