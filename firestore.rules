/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for personal data,
 * allows public read access to global prediction data, and restricts admin-managed content.
 *
 * @dataStructure
 * - /users/{userId}: User profiles and settings, accessible only by the owning user.
 * - /users/{userId}/notifications/{notificationId}: Notifications specific to a user.
 * - /favorites/{userId}: User's favorite teams, leagues, and players.
 * - /adminFavorites/{teamId}: Admin-curated list of favorite teams.
 * - /leagueCustomizations/{leagueId}: User-customized league names.
 * - /countryCustomizations/{countryName}: User-customized country names.
 * - /continentCustomizations/{continentName}: User-customized continent names.
 * - /teamCustomizations/{teamId}: User-customized team names.
 * - /playerCustomizations/{playerId}: User-customized player names.
 * - /coachCustomizations/{coachId}: User-customized coach names.
 * - /matches/{matchId}: Match metadata (e.g., comment settings).
 * - /matches/{matchId}/comments/{commentId}: Comments on matches.
 * - /managedCompetitions/{leagueId}: Competitions managed by admins.
 * - /predictions/{predictionId}: User predictions for matches.
 * - /leaderboard/{userId}: User's score on the leaderboard.
 * - /dailyGlobalPredictions/{date}: List of globally-predictable matches for a specific day.
 *
 * @keySecurityDecisions
 * - Strict User Ownership: Most user-specific data is accessible only to the authenticated user.
 * - Admin Role: The `isAdmin()` function allows privileged write access to specific collections. The email `admin@app.com` is hardcoded.
 * - Public Read for Global Predictions: The `dailyGlobalPredictions` collection is publicly readable.
 * - No User Listing: The rules explicitly deny listing of users (`/users`).
 *
 * @denormalizationForAuthorization
 * - The `/notifications/{notificationId}` document contains a `targetUserId` field, which is used to authorize read and delete operations. This avoids the need to query a separate collection to determine ownership.
 * - The `/predictions/{predictionId}` document contains a `userId` field, which is used to authorize write operations. This avoids the need to perform additional reads to verify ownership.
 *
 * @structuralSegregation
 * - Public data (daily global predictions) is stored in a top-level collection (`/dailyGlobalPredictions`) to allow for public read access without compromising the security of user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the requesting user is the owner of the resource and it exists.
      *               This function is used for destructive operations (update, delete) to ensure that the document exists before attempting to modify it.
      * @param {string} userId - The user ID to compare against the request's authentication UID.
      * @return {boolean} True if the user is the owner and the document exists, false otherwise.
      */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Checks if the requesting user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.email == "admin@app.com";
    }

    /**
     * @description Defines security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can only access their own profile.
     * @deny (list) - Listing of all users is not allowed.
     * @deny (create) - Unauthenticated users cannot create profiles.
     * @deny (get, update, delete) - Authenticated user cannot access others profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for user notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) - Any authenticated user can create a notification.
     * @allow (get, delete) - Only the target user can read/delete their own notifications.
     * @deny (list) - Listing of all notification is not allowed.
     * @deny (create) - Unauthenticated users cannot create profiles.
     * @deny (get, update, delete) - Authenticated user cannot access others profiles.
     * @principle Enforces document ownership for read/delete operations.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isSignedIn() && resource.data.recipientId == request.auth.uid;
      allow list: if isOwner(userId);
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if isSignedIn() && resource.data.recipientId == request.auth.uid;
    }

    /**
     * @description Defines security rules for user favorites.
     * @path /favorites/{userId}
     * @allow (create) - Authenticated user can create their own favorites.
     * @allow (get, update, delete) - Authenticated user can only access their own favorites.
     * @deny (list) - Listing of all favorites is not allowed.
     * @deny (create) - Unauthenticated users cannot create favorites.
     * @deny (get, update, delete) - Authenticated user cannot access others favorites.
     * @principle Enforces document ownership for all operations.
     */
    match /favorites/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for admin-curated favorite teams.
     * @path /adminFavorites/{teamId}
     * @allow (read, list) - Public read access.
     * @allow (write) - Only admins can modify.
     * @deny (write) - Non-admins cannot modify.
     * @principle Restricts write access to admins only.
     */
    match /adminFavorites/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines security rules for league customizations.
     * @path /leagueCustomizations/{leagueId}
     * @allow (create) - Authenticated user can create their own customization.
     * @allow (get, update, delete) - Authenticated user can only access their own customization.
     * @deny (list) - Listing of all customizations is not allowed.
     * @deny (create) - Unauthenticated users cannot create customizations.
     * @deny (get, update, delete) - Authenticated user cannot access others customizations.
     * @principle Enforces document ownership for all operations.
     */
    match /leagueCustomizations/{leagueId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Defines security rules for country customizations.
     * @path /countryCustomizations/{countryName}
     * @allow (create) - Authenticated user can create their own customization.
     * @allow (get, update, delete) - Authenticated user can only access their own customization.
     * @deny (list) - Listing of all customizations is not allowed.
     * @deny (create) - Unauthenticated users cannot create customizations.
     * @deny (get, update, delete) - Authenticated user cannot access others customizations.
     * @principle Enforces document ownership for all operations.
     */
    match /countryCustomizations/{countryName} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

      /**
       * @description Defines security rules for continent customizations.
       * @path /continentCustomizations/{continentName}
       * @allow (create) - Authenticated user can create their own customization.
       * @allow (get, update, delete) - Authenticated user can only access their own customization.
       * @deny (list) - Listing of all customizations is not allowed.
       * @deny (create) - Unauthenticated users cannot create customizations.
       * @deny (get, update, delete) - Authenticated user cannot access others customizations.
       * @principle Enforces document ownership for all operations.
       */
    match /continentCustomizations/{continentName} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Defines security rules for team customizations.
     * @path /teamCustomizations/{teamId}
     * @allow (create) - Authenticated user can create their own customization.
     * @allow (get, update, delete) - Authenticated user can only access their own customization.
     * @deny (list) - Listing of all customizations is not allowed.
     * @deny (create) - Unauthenticated users cannot create customizations.
     * @deny (get, update, delete) - Authenticated user cannot access others customizations.
     * @principle Enforces document ownership for all operations.
     */
    match /teamCustomizations/{teamId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Defines security rules for player customizations.
     * @path /playerCustomizations/{playerId}
     * @allow (create) - Authenticated user can create their own customization.
     * @allow (get, update, delete) - Authenticated user can only access their own customization.
     * @deny (list) - Listing of all customizations is not allowed.
     * @deny (create) - Unauthenticated users cannot create customizations.
     * @deny (get, update, delete) - Authenticated user cannot access others customizations.
     * @principle Enforces document ownership for all operations.
     */
    match /playerCustomizations/{playerId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Defines security rules for coach customizations.
     * @path /coachCustomizations/{coachId}
     * @allow (create) - Authenticated user can create their own customization.
     * @allow (get, update, delete) - Authenticated user can only access their own customization.
     * @deny (list) - Listing of all customizations is not allowed.
     * @deny (create) - Unauthenticated users cannot create customizations.
     * @deny (get, update, delete) - Authenticated user cannot access others customizations.
     * @principle Enforces document ownership for all operations.
     */
    match /coachCustomizations/{coachId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Defines security rules for match details.
     * @path /matches/{matchId}
     * @allow (read, list) - Public read access.
     * @allow (write) - No write access granted in this prototype.
     * @principle Public read access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Defines security rules for match comments.
     * @path /matches/{matchId}/comments/{commentId}
     * @allow (read, list) - Public read access.
     * @allow (create) - Authenticated user can create a comment.
     * @allow (update, delete) - Only the comment owner can update/delete.
     * @principle Public read, owner-only writes.
     */
    match /matches/{matchId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Defines security rules for managed competitions.
     * @path /managedCompetitions/{leagueId}
     * @allow (read, list) - Public read access.
     * @allow (write) - Only admins can modify.
     * @deny (write) - Non-admins cannot modify.
     * @principle Restricts write access to admins only.
     */
    match /managedCompetitions/{leagueId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines security rules for user predictions.
     * @path /predictions/{predictionId}
     * @allow (create) - Authenticated user can create their own prediction.
     * @allow (get, update, delete) - Authenticated user can only access their own prediction.
     * @deny (list) - Listing of all prediction is not allowed.
     * @deny (create) - Unauthenticated users cannot create predictions.
     * @deny (get, update, delete) - Authenticated user cannot access others predictions.
     * @principle Enforces document ownership for all operations.
     */
    match /predictions/{predictionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Defines security rules for the leaderboard.
     * @path /leaderboard/{userId}
     * @allow (read, list) - Public read access.
     * @allow (write) - No write access granted in this prototype.
     * @principle Public read access.
     */
    match /leaderboard/{userId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Defines security rules for daily global predictions.
     * @path /dailyGlobalPredictions/{date}
     * @allow (read, list) - Public read access.
     * @allow (write) - Only admins can modify.
     * @deny (write) - Non-admins cannot modify.
     * @principle Restricts write access to admins only.
     */
    match /dailyGlobalPredictions/{date} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}