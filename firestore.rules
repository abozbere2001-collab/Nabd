rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profile data.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to competition data, but restricts writes to admins only.
     * @path /competitions/{competitionId}
     * @allow (read) Always
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Allows public read access while restricting writes to admins.
     */
    match /competitions/{competitionId} {
      function isAdmin(){
        return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to team data, but restricts writes to admins only.
     * @path /teams/{teamId}
     * @allow (read) Always
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Allows public read access while restricting writes to admins.
     */
    match /teams/{teamId} {
      function isAdmin(){
        return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to match data.
     * @path /matches/{matchId}
     * @allow (read) Always
     * @principle Allows unrestricted read access to match data.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to news articles, but restricts writes to admins only.
     * @path /news/{newsId}
     * @allow (read) Always
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Allows public read access while restricting writes to admins.
     */
    match /news/{newsId} {
      function isAdmin(){
        return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts access to admin data to admins only. The existence of an admin document implies admin status.
     * @path /admins/{adminId}
     * @allow (create, update, delete) if isAdmin()
     * @deny (read, write) if !isAdmin()
     * @principle Restricts admin management to existing admins.
     */
    match /admins/{adminId} {
        function isAdmin(){
            return request.auth.uid != null && get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
        }
      allow get: if isAdmin();
      allow list: if false; // Admin listing is not permitted.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Enforces user-ownership for user favorites data.
     * @path /users/{userId}/favorites
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favorites {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to top competitions data, but restricts writes to admins only.
     * @path /topCompetitions/{competitionId}
     * @allow (read) Always
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     */
    match /topCompetitions/{competitionId} {
      function isAdmin(){
        return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
        }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to top teams data, but restricts writes to admins only.
     * @path /topTeams/{teamId}
     * @allow (read) Always
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     */
    match /topTeams/{teamId} {
      function isAdmin(){
        return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
        }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

        /**
         * @description Allows only admins to create, update, and delete league customizations.
         * @path /leagueCustomizations/{leagueId}
         * @allow (create, update, delete) if isAdmin()
         */
        match /leagueCustomizations/{leagueId} {
          function isAdmin(){
            return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
          }
          allow get: if isAdmin();
          allow list: if isAdmin();
          allow create: if isAdmin();
          allow update: if isAdmin();
          allow delete: if isAdmin();
        }

        /**
         * @description Allows only admins to create, update, and delete team customizations.
         * @path /teamCustomizations/{teamId}
         * @allow (create, update, delete) if isAdmin()
         */
        match /teamCustomizations/{teamId} {
          function isAdmin(){
            return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
          }
          allow get: if isAdmin();
          allow list: if isAdmin();
          allow create: if isAdmin();
          allow update: if isAdmin();
          allow delete: if isAdmin();
        }

        /**
         * @description Allows only admins to create, update, and delete player customizations.
         * @path /playerCustomizations/{playerId}
         * @allow (create, update, delete) if isAdmin()
         */
        match /playerCustomizations/{playerId} {
          function isAdmin(){
            return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
          }
          allow get: if isAdmin();
          allow list: if isAdmin();
          allow create: if isAdmin();
          allow update: if isAdmin();
          allow delete: if isAdmin();
        }

        /**
         * @description Allows only admins to create, update, and delete match customizations.
         * @path /matchCustomizations/{fixtureId}
         * @allow (create, update, delete) if isAdmin()
         */
        match /matchCustomizations/{fixtureId} {
            function isAdmin(){
                return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
            }
          allow get: if isAdmin();
          allow list: if isAdmin();
          allow create: if isAdmin();
          allow update: if isAdmin();
          allow delete: if isAdmin();
        }

        /**
         * @description Allows only admins to create, update, and delete continent customizations.
         * @path /continentCustomizations/{continentId}
         * @allow (create, update, delete) if isAdmin()
         */
        match /continentCustomizations/{continentId} {
           function isAdmin(){
                return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
            }
          allow get: if isAdmin();
          allow list: if isAdmin();
          allow create: if isAdmin();
          allow update: if isAdmin();
          allow delete: if isAdmin();
        }

        /**
         * @description Allows only admins to create, update, and delete country customizations.
         * @path /countryCustomizations/{countryId}
         * @allow (create, update, delete) if isAdmin()
         */
        match /countryCustomizations/{countryId} {
          function isAdmin(){
                return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
            }
          allow get: if isAdmin();
          allow list: if isAdmin();
          allow create: if isAdmin();
          allow update: if isAdmin();
          allow delete: if isAdmin();
        }

        /**
         * @description Allows only admins to create, update, and delete pinned Iraqi matches.
         * @path /pinnedIraqiMatches/{matchId}
         * @allow (create, update, delete) if isAdmin()
         */
        match /pinnedIraqiMatches/{matchId} {
            function isAdmin(){
                return get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
            }
          allow get: if true;
          allow list: if true;
          allow create: if isAdmin();
          allow update: if isAdmin();
          allow delete: if isAdmin();
        }
  }
}