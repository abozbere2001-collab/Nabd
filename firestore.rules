/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and favorites,
 *              public read access for shared entities (competitions, teams, matches, news), and
 *              admin-only write access for administrative data.
 * @dataStructure
 *   /users/{userId}: User profile information. Accessible only by the user.
 *   /competitions/{competitionId}: Competition data. Publicly readable, admin-writeable.
 *   /teams/{teamId}: Team data. Publicly readable, admin-writeable.
 *   /matches/{matchId}: Match data. Publicly readable.
 *   /news/{newsId}: News articles. Publicly readable, admin-writeable.
 *   /admins/{adminId}: Admin user data. Only admins can manage admin data.
 *   /users/{userId}/favorites: User's favorite teams and competitions. Accessible only by the user.
 * @keySecurityDecisions
 *   - User data is strictly private and accessible only to the owning user.
 *   - Shared entities (competitions, teams, matches, news) are publicly readable to enable easy data consumption.
 *   - Admin privileges are determined by the existence of a document in the `/admins/{adminId}` collection.
 *   - Listing of admins is disallowed to prevent information disclosure.
 * @denormalizationForAuthorization
 *   - Admin status is determined by the existence of a document in `/admins/{adminId}`, avoiding the need for complex role-based checks or custom claims.
 * @structuralSegregation
 *   - Publicly readable data (competitions, teams, matches, news) is stored in top-level collections, separate from private user data, to simplify read access rules and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create, update, get) Signed-in user with UID matching the document ID (userId).
     * @allow (delete) Signed-in user with UID matching the document ID (userId), assuming the document exists.
     * @allow (list) Not allowed.
     * @deny (create, update, get, delete) Any user trying to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows public read access to competition data and admin-only write access.
     * @path /competitions/{competitionId}
     * @allow (get, list) Any user can read competition data.
     * @allow (create, update, delete) Only admins can create, update, or delete competition data.
     * @deny (create, update, delete) Non-admins trying to modify competition data.
     * @principle Public read, owner-only write (admins are considered owners).
     */
    match /competitions/{competitionId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to team data and admin-only write access.
     * @path /teams/{teamId}
     * @allow (get, list) Any user can read team data.
     * @allow (create, update, delete) Only admins can create, update, or delete team data.
     * @deny (create, update, delete) Non-admins trying to modify team data.
     * @principle Public read, owner-only write (admins are considered owners).
     */
    match /teams/{teamId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) Any user can read match data.
     * @deny (create, update, delete) No one can create, update, or delete match data through the client.
     * @principle Public read, no client-side writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to news articles and admin-only write access.
     * @path /news/{newsId}
     * @allow (get, list) Any user can read news articles.
     * @allow (create, update, delete) Only admins can create, update, or delete news articles.
     * @deny (create, update, delete) Non-admins trying to modify news articles.
     * @principle Public read, owner-only write (admins are considered owners).
     */
    match /news/{newsId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts access to admin data to only authenticated admins.
     * @path /admins/{adminId}
     * @allow (create, update, delete) Only existing admins can create, update or delete admin accounts.
     * @allow (get, list) Not allowed.
     * @deny (create, update, delete, get) Non-admins and unauthenticated users trying to access admin data.
     * @principle Restricts access to admin data to authorized admins only.
     */
    match /admins/{adminId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow create: if isAdmin();
      allow get: if false;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
      allow list: if false;
    }

    /**
     * @description Allows a user to read and write their own favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (create, update, get) Signed-in user with UID matching the parent document ID (userId).
     * @allow (delete) Signed-in user with UID matching the parent document ID (userId), assuming the document exists.
     * @allow (list) Signed-in user with UID matching the parent document ID (userId).
     * @deny (create, update, get, delete) Any user trying to access another user's favorites.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favorites {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return isSignedIn() && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow get: if isOwner(userId);
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
        allow list: if isOwner(userId);
    }
     /**
     * @description Allows public read access to top competition data and admin-only write access.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) Any user can read top competition data.
     * @allow (create, update, delete) Only admins can create, update, or delete top competition data.
     * @deny (create, update, delete) Non-admins trying to modify top competition data.
     */
    match /topCompetitions/{competitionId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to top team data and admin-only write access.
     * @path /topTeams/{teamId}
     * @allow (get, list) Any user can read top team data.
     * @allow (create, update, delete) Only admins can create, update, or delete top team data.
     * @deny (create, update, delete) Non-admins trying to modify top team data.
     */
    match /topTeams/{teamId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    /**
     * @description Allows public read access to league customizations and admin-only write access.
     * @path /leagueCustomizations/{leagueId}
     * @allow (get, list) Any user can read league customizations.
     * @allow (create, update, delete) Only admins can create, update, or delete league customizations.
     * @deny (create, update, delete) Non-admins trying to modify league customizations.
     */
    match /leagueCustomizations/{leagueId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to team customizations and admin-only write access.
     * @path /teamCustomizations/{teamId}
     * @allow (get, list) Any user can read team customizations.
     * @allow (create, update, delete) Only admins can create, update, or delete team customizations.
     * @deny (create, update, delete) Non-admins trying to modify team customizations.
     */
    match /teamCustomizations/{teamId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to player customizations and admin-only write access.
     * @path /playerCustomizations/{playerId}
     * @allow (get, list) Any user can read player customizations.
     * @allow (create, update, delete) Only admins can create, update, or delete player customizations.
     * @deny (create, update, delete) Non-admins trying to modify player customizations.
     */
    match /playerCustomizations/{playerId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to match customizations and admin-only write access.
     * @path /matchCustomizations/{fixtureId}
     * @allow (get, list) Any user can read match customizations.
     * @allow (create, update, delete) Only admins can create, update, or delete match customizations.
     * @deny (create, update, delete) Non-admins trying to modify match customizations.
     */
    match /matchCustomizations/{fixtureId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to continent customizations and admin-only write access.
     * @path /continentCustomizations/{continentId}
     * @allow (get, list) Any user can read continent customizations.
     * @allow (create, update, delete) Only admins can create, update, or delete continent customizations.
     * @deny (create, update, delete) Non-admins trying to modify continent customizations.
     */
    match /continentCustomizations/{continentId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to country customizations and admin-only write access.
     * @path /countryCustomizations/{countryId}
     * @allow (get, list) Any user can read country customizations.
     * @allow (create, update, delete) Only admins can create, update, or delete country customizations.
     * @deny (create, update, delete) Non-admins trying to modify country customizations.
     */
    match /countryCustomizations/{countryId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admin-only access to pinned Iraqi matches data.
     * @path /pinnedIraqiMatches/{matchId}
     * @allow (get, list) Any user can read pinned Iraqi matches data.
     * @allow (create, update, delete) Only admins can create, update, or delete pinned Iraqi matches data.
     * @deny (create, update, delete) Non-admins trying to modify pinned Iraqi matches data.
     */
    match /pinnedIraqiMatches/{matchId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}