/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-based access control.
 * User data is strictly controlled by the individual user, while administrative data
 * (e.g., competitions, teams, news) is managed by designated admins.
 *
 * Data Structure:
 * - User-specific data is nested under /users/{userId}
 * - Shared entities (competitions, teams, matches, news) reside in top-level collections.
 * - Admin status is determined by the presence of a document in /admins/{adminId}.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for certain collections (e.g., competitions, teams, matches, news).
 * - Admin-only write access is enforced for administrative collections.
 *
 * Denormalization for Authorization:
 *  Admin status is checked by verifying the existence of a document in `/admins/{adminId}`,
 *  avoiding the need to store redundant admin flags in user documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Defines a set of permissions that can be granted to admin users.
     * In this example, an admin can read, create, update, and delete documents.
     */
    function adminPermissions() {
      return isAdmin();
    }
	  
    /**
     * @description Rules for user profile information.
     * @path /users/{userId}
     * @allow (create) - User with matching ID can create their own profile.
     * @allow (get, update, delete) - User with matching ID can read/update/delete their own profile.
     * @deny (create) - User cannot create a profile with a mismatched ID.
     * @deny (get, update, delete) - User cannot read/update/delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can create/update/delete.
     * @deny (create, update, delete) - Non-admins cannot create/update/delete.
     * @principle Restricts write access to admins.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if adminPermissions();
    }

    /**
     * @description Rules for team data.
     * @path /teams/{teamId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can create/update/delete.
     * @deny (create, update, delete) - Non-admins cannot create/update/delete.
     * @principle Restricts write access to admins.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if adminPermissions();
    }

    /**
     * @description Rules for match data.
     * @path /matches/{matchId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No one can create/update/delete.
     * @principle Public read-only access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for news articles.
     * @path /news/{newsId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can create/update/delete.
     * @deny (create, update, delete) - Non-admins cannot create/update/delete.
     * @principle Restricts write access to admins.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if adminPermissions();
    }

    /**
     * @description Rules for admin user data.
     * @path /admins/{adminId}
     * @allow get, list: if false;
     * @allow create: if request.auth.uid == adminId && isAdmin();
     * @allow update: if request.auth.uid == adminId && isAdmin() && resource != null;
     * @allow delete: if request.auth.uid == adminId && isAdmin() && resource != null;
     * @principle Restricts access to admin data.
     */
    match /admins/{adminId} {
       allow get, list: if false;
       allow create: if request.auth.uid == adminId && isAdmin();
       allow update: if request.auth.uid == adminId && isAdmin() && resource != null;
       allow delete: if request.auth.uid == adminId && isAdmin() && resource != null;
    }

    /**
     * @description Rules for user's favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (get, update) - User with matching ID can read/write their own favorites.
     * @deny (get, update) - User cannot read/write another user's favorites.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/favorites {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for top competitions marked by admins.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can create/update/delete.
     * @deny (create, update, delete) - Non-admins cannot create/update/delete.
     * @principle Restricts write access to admins.
     */
    match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if adminPermissions();
    }

    /**
     * @description Rules for top teams marked by admins.
     * @path /topTeams/{teamId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can create/update/delete.
     * @deny (create, update, delete) - Non-admins cannot create/update/delete.
     * @principle Restricts write access to admins.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if adminPermissions();
    }
	  
	/**
     * @description Rules for continent customisations.
     * @path /continentCustomizations/{continentCustomizationId}
     * @allow (create, update, delete) - Only admins can create/update/delete.
     *  @allow (get, list) - Only admins can get or list documents in this collection.
     * @deny (create, update, delete) - Non-admins cannot create/update/delete.
     * @principle Restricts write access to admins.
     */
    match /continentCustomizations/{continentCustomizationId} {
      allow get, list: if adminPermissions();
      allow create, update, delete: if adminPermissions();
    }
  }
}