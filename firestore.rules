/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, role-based access control model.
 * User data is strictly controlled by the owning user, while admin-managed
 * data is publicly readable but only modifiable by designated administrators.
 * The existence of an admin document signifies admin privileges.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user.
 * - /competitions/{competitionId}, /teams/{teamId}, /matches/{matchId}, /news/{newsId}:
 *   Publicly readable data, modifiable only by admins.
 * - /admins/{adminId}: Admin user data; its existence confers admin privileges.
 * - /users/{userId}/favorites: User's favorite teams and competitions, accessible only by the user.
 * - /topCompetitions/{competitionId}, /topTeams/{teamId}: Admin-curated top competitions and teams.
 * - /leagueCustomizations/{leagueId}, /teamCustomizations/{teamId}, /playerCustomizations/{playerId}, /continentCustomizations/{continentId}, /countryCustomizations/{countryId}: Admin-managed customizations.
 * - /pinnedIraqiMatch/special: Details of a pinned Iraqi match, managed by an admin.
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the owning user.
 * - Admins are identified by the existence of a document in the `/admins` collection.
 * - Public data (competitions, teams, matches, news) is readable by anyone.
 * - No user listing is allowed for any collection.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of an admin document, avoiding the need for complex role lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their profile: request.auth.uid == 'user123'
     * @allow (get,update,delete) - User with ID 'user123' reads, updates, or deletes their profile: request.auth.uid == 'user123'
     * @deny (create,update,delete) - User with ID 'user456' attempts to create, update, or delete the profile of user 'user123': request.auth.uid != 'user123'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to competition data. Publicly readable, but only admins can create/update/delete.
     * @path /competitions/{competitionId}
     * @allow (get,list) - Any user can read competition data.
     * @allow (create,update,delete) - An admin creates/updates/deletes a competition: exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @deny (create,update,delete) - A non-admin attempts to create/update/delete a competition: !exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @principle Restricts write access to admins.
     */
    match /competitions/{competitionId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to team data. Publicly readable, but only admins can create/update/delete.
     * @path /teams/{teamId}
     * @allow (get,list) - Any user can read team data.
     * @allow (create,update,delete) - An admin creates/updates/deletes a team: exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @deny (create,update,delete) - A non-admin attempts to create/update/delete a team: !exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @principle Restricts write access to admins.
     */
    match /teams/{teamId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to match data. Publicly readable.
     * @path /matches/{matchId}
     * @allow (get,list) - Any user can read match data.
     * @deny (create,update,delete) - No one can create/update/delete match data.
     * @principle Allows public read access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to news articles. Publicly readable, but only admins can create/update/delete.
     * @path /news/{newsId}
     * @allow (get,list) - Any user can read news articles.
     * @allow (create,update,delete) - An admin creates/updates/deletes a news article: exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @deny (create,update,delete) - A non-admin attempts to create/update/delete a news article: !exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @principle Restricts write access to admins.
     */
    match /news/{newsId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to admin user data. Only admins can create/update/delete other admins. Normal users can't read.
     * @path /admins/{adminId}
     * @allow (create,update,delete) - An admin creates/updates/deletes another admin: exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @deny (get,list) - Normal users cannot read admin data.
     * @deny (create,update,delete) - A non-admin attempts to create/update/delete admin data: !exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @principle Restricts access to admin data and actions.
     */
    match /admins/{adminId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to user's favorite teams and competitions. Only the user can read/write their own favorites.
     * @path /users/{userId}/favorites
     * @allow (create) - User with ID 'user123' creates their favorites: request.auth.uid == 'user123'
     * @allow (get,update,delete) - User with ID 'user123' reads, updates, or deletes their favorites: request.auth.uid == 'user123'
     * @deny (create,update,delete) - User with ID 'user456' attempts to create, update, or delete the favorites of user 'user123': request.auth.uid != 'user123'
     * @principle Enforces document ownership for user favorites.
     */
    match /users/{userId}/favorites {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
	/**
     * @description Controls access to top competition data. Publicly readable, but only admins can create/update/delete.
     * @path /topCompetitions/{competitionId}
     * @allow (get,list) - Any user can read top competition data.
     * @allow (create,update,delete) - An admin creates/updates/deletes a top competition: exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @deny (create,update,delete) - A non-admin attempts to create/update/delete a top competition: !exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @principle Restricts write access to admins.
     */
    match /topCompetitions/{competitionId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to top team data. Publicly readable, but only admins can create/update/delete.
     * @path /topTeams/{teamId}
     * @allow (get,list) - Any user can read top team data.
     * @allow (create,update,delete) - An admin creates/updates/deletes a top team: exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @deny (create,update,delete) - A non-admin attempts to create/update/delete a top team: !exists(/databases/$(database)/documents/admins/$(request.auth.uid))
     * @principle Restricts write access to admins.
     */
    match /topTeams/{teamId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores custom names for leagues set by admins.
     * @path /leagueCustomizations/{leagueId}
     */
    match /leagueCustomizations/{leagueId} {
        function isAdmin() {
          return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores custom names for teams set by admins.
     * @path /teamCustomizations/{teamId}
     */
    match /teamCustomizations/{teamId} {
        function isAdmin() {
          return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores custom names for players set by admins.
     * @path /playerCustomizations/{playerId}
     */
    match /playerCustomizations/{playerId} {
        function isAdmin() {
          return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores custom names for continents set by admins.
     * @path /continentCustomizations/{continentId}
     */
    match /continentCustomizations/{continentId} {
        function isAdmin() {
          return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores custom names for countries set by admins.
     * @path /countryCustomizations/{countryId}
     */
    match /countryCustomizations/{countryId} {
        function isAdmin() {
          return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores the details of a single pinned Iraqi match, managed by an admin.
     * @path /pinnedIraqiMatch/special
     */
    match /pinnedIraqiMatch/special {
        function isAdmin() {
          return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get: if true;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

  }
}