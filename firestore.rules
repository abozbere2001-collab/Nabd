/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access.
 * User data and preferences are strictly controlled by the individual user, while
 * core data like competitions, teams, and news are publicly readable but only
 * modifiable by administrators.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Shared entities (competitions, teams, matches, news) reside in top-level collections.
 * - Admin status is determined by the existence of a document in `/admins/{adminId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data and favorites.
 * - Listing of admin documents is disallowed.
 * - All write operations are explicitly protected by authorization checks.
 * - Data shape is not strictly enforced in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - Admin status is checked by verifying the existence of a document in `/admins/{adminId}`,
 *   avoiding the need to store admin roles within user documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's ID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership for user-specific data.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the current user is an admin by verifying the existence of their admin document.
      * @path N/A
      * @allow N/A
      * @deny N/A
      * @principle Checks admin status.
      */
    function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Checks if the current user is the owner and if the resource exists
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Checks if the user is the owner and that the document exists
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }


    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile with matching ID.
     * @allow (get) User with ID 'user123' reads their own profile.
     * @allow (update) User with ID 'user123' updates their own profile.
     * @allow (delete) User with ID 'user123' deletes their own profile.
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     * @deny (get) User with ID 'user123' tries to read the profile of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for competitions.
     * @path /competitions/{competitionId}
     * @allow (get) Any user can read competition data.
     * @allow (create) Admin creates a new competition.
     * @deny (create) Non-admin tries to create a new competition.
     * @principle Public read access, admin-only writes.
     */
    match /competitions/{competitionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for teams.
     * @path /teams/{teamId}
     * @allow (get) Any user can read team data.
     * @allow (create) Admin creates a new team.
     * @deny (create) Non-admin tries to create a new team.
     * @principle Public read access, admin-only writes.
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for matches.
     * @path /matches/{matchId}
     * @allow (get) Any user can read match data.
     * @principle Public read access.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
       allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for news articles.
     * @path /news/{newsId}
     * @allow (get) Any user can read news articles.
     * @allow (create) Admin creates a new news article.
     * @deny (create) Non-admin tries to create a new news article.
     * @principle Public read access, admin-only writes.
     */
    match /news/{newsId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for admin user data.
     * @path /admins/{adminId}
     * @deny (get) Non-admin tries to read admin data.
     * @allow (create) Admin creates a new admin.
     * @deny (create) Non-admin tries to create a new admin.
     * @principle Admin-only access.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for user favorites.
     * @path /users/{userId}/favorites
     * @allow (create) User creates their own favorites list.
     * @allow (get) User reads their own favorites list.
     * @allow (update) User updates their own favorites list.
     * @deny (create) User tries to create a favorites list for another user.
     * @deny (get) User tries to read the favorites list of another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favorites {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

	/**
     * @description Rules for top competitions.
     * @path /topCompetitions/{competitionId}
     * @allow (get) Any user can read top competition data.
     * @allow (create) Admin creates a new top competition.
     * @deny (create) Non-admin tries to create a new top competition.
     * @principle Public read access, admin-only writes.
     */
    match /topCompetitions/{competitionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

      /**
     * @description Rules for top teams.
     * @path /topTeams/{teamId}
     * @allow (get) Any user can read top team data.
     * @allow (create) Admin creates a new top team.
     * @deny (create) Non-admin tries to create a new top team.
     * @principle Public read access, admin-only writes.
     */
    match /topTeams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

       /**
       * @description Rules for league customizations.
       * @path /leagueCustomizations/{leagueId}
       * @allow (read, write) Admins can customize leagues.
       */
      match /leagueCustomizations/{leagueId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      /**
       * @description Rules for team customizations.
       * @path /teamCustomizations/{teamId}
       * @allow (read, write) Admins can customize teams.
       */
      match /teamCustomizations/{teamId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      /**
       * @description Rules for player customizations.
       * @path /playerCustomizations/{playerId}
       * @allow (read, write) Admins can customize players.
       */
      match /playerCustomizations/{playerId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      /**
       * @description Rules for continent customizations.
       * @path /continentCustomizations/{continentId}
       * @allow (read, write) Admins can customize continents.
       */
      match /continentCustomizations/{continentId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      /**
       * @description Rules for country customizations.
       * @path /countryCustomizations/{countryId}
       * @allow (read, write) Admins can customize countries.
       */
      match /countryCustomizations/{countryId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      /**
       * @description Rules for pinned Iraqi match.
       * @path /pinnedIraqiMatch/special
       * @allow (read, write) Admins manage the pinned match.
       */
      match /pinnedIraqiMatch/special {
        allow get: if true;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
  }
}