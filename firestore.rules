/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and favorites,
 *              allows public read access to competitions, teams, matches and news.
 *              Admin data is only accessible to admins. Prediction matches are publicly readable,
 *              while user-specific predictions are only accessible to the user. The leaderboard
 *              collection is only writable by authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, owned by the user.
 * - /competitions/{competitionId}: Public competition data.
 * - /teams/{teamId}: Public team data.
 * - /matches/{matchId}: Public match data.
 * - /news/{newsId}: Public news data.
 * - /admins/{adminId}: Admin user data, only accessible to admins.
 * - /users/{userId}/favorites/data: User's favorite teams and competitions, owned by the user.
 * - /predictions/{fixtureId}: Publicly readable matches that are pinned by admins for predictions.
 * - /predictions/{fixtureId}/userPredictions/{userId}: User's predictions for a match, owned by the user.
 * - /leaderboard/{userId}: User's score on the leaderboard, only writable by authenticated users
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile and favorites.
 * - Competitions, teams, matches, and news are publicly readable.
 * - Admins can only access admin data.
 * - Listing of users, admins, and user predictions is disallowed.
 * - Leaderboard can be written by any signed-in user.
 *
 * Denormalization for Authorization:
 *   The 'authorId' field in the /news/{newsId} documents is used to determine ownership for updates and deletes.
 *
 * Structural Segregation:
 *   Private user data (profile, favorites, predictions) is stored under the /users/{userId} path, while
 *   public data (competitions, teams, matches, news) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their own profile (auth.uid == 'user123').
     * @allow (get, update, delete) - User with ID 'user123' reads/updates/deletes their own profile (auth.uid == 'user123').
     * @deny (create) - User with ID 'user123' tries to create a profile for 'user456' (auth.uid != 'user456').
     * @deny (get, update, delete) - User with ID 'user123' tries to read/update/delete the profile of 'user456' (auth.uid != 'user456').
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Any user can read competition data.
     * @deny (create, update, delete) - No user can create, update, or delete competition data.
     * @principle Allows public read access but restricts all write access.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to team data.
     * @path /teams/{teamId}
     * @allow (get, list) - Any user can read team data.
     * @deny (create, update, delete) - No user can create, update, or delete team data.
     * @principle Allows public read access but restricts all write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) - Any user can read match data.
     * @deny (create, update, delete) - No user can create, update, or delete match data.
     * @principle Allows public read access but restricts all write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to news articles.
     * @path /news/{newsId}
     * @allow (get, list) - Any user can read news articles.
     * @allow (create) - Only the author can create a news article with their authorId.
     * @allow (update, delete) - Only the author can update/delete their own news article.
     * @deny (create) - User tries to create a news article with an authorId that doesn't match their own.
     * @deny (update, delete) - User tries to update/delete a news article that is not their own.
     * @principle Allows public read access and restricts write access to the author.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Manages access to admin user data.
     * @path /admins/{adminId}
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Restricts all access to admin data.
     */
    match /admins/{adminId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to user's favorite teams and competitions.
     * @path /users/{userId}/favorites/data
     * @allow (create, get, update, delete) - Only the user can manage their own favorites.
     * @deny (create, get, update, delete) - User tries to access another user's favorites.
     * @principle Enforces document ownership for user favorites.
     */
    match /users/{userId}/favorites/data {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to matches pinned by admins for predictions.
     * @path /predictions/{fixtureId}
     * @allow (get, list) - Any user can read the prediction matches.
     * @deny (create, update, delete) - No user can create, update, or delete prediction matches.
     * @principle Allows public read access but restricts all write access.
     */
    match /predictions/{fixtureId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to user's predictions for a specific match.
     * @path /predictions/{fixtureId}/userPredictions/{userId}
     * @allow (create, get, update, delete) - Only the user can manage their own predictions.
     * @deny (create, get, update, delete) - User tries to access another user's predictions.
     * @principle Enforces document ownership for user predictions.
     */
    match /predictions/{fixtureId}/userPredictions/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
    
    /**
     * @description Manages access to user's score on the leaderboard
     * @path /leaderboard/{userId}
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow get: if true;
     * @deny delete: if true;
     * @deny list: if true;
     * @principle Allows authenticated users to write and get for leaderboard.
     */
    match /leaderboard/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}