/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for personal data and allows public read access to some collections, but restricts write access based on ownership.
 *
 * Data Structure:
 * - User profiles and related data (favorites, customizations, notifications) are stored under `/users/{userId}`.
 * - Public match data and admin-managed data are stored in top-level collections like `/matches`, `/adminFavorites`, `/managedCompetitions`, `/dailyGlobalPredictions`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and related preferences.
 * - Listing of other user profiles is disallowed.
 * - Public collections are readable by all, but writable only with validated ownership.
 *
 * Denormalization for Authorization:
 * - No denormalization is needed as ownership is determined by the user ID in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description User profiles are readable and writable only by the owning user.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates a profile with their UID.
     * @allow (get) User with UID 'user123' reads their own profile.
     * @allow (update) User with UID 'user123' updates their own profile.
     * @allow (delete) User with UID 'user123' deletes their own profile.
     * @deny (create) User with UID 'user456' attempts to create a profile for 'user123'.
     * @deny (get) User with UID 'user456' attempts to read the profile of 'user123'.
     * @deny (update) User with UID 'user456' attempts to update the profile of 'user123'.
     * @deny (delete) User with UID 'user456' attempts to delete the profile of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User notifications are readable and writable only by the owning user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with UID 'user123' creates a notification.
     * @allow (get) User with UID 'user123' reads their own notification.
     * @allow (update) User with UID 'user123' updates their own notification.
     * @allow (delete) User with UID 'user123' deletes their own notification.
     * @deny (create) User with UID 'user456' attempts to create a notification for 'user123'.
     * @deny (get) User with UID 'user456' attempts to read the notification of 'user123'.
     * @deny (update) User with UID 'user456' attempts to update the notification of 'user123'.
     * @deny (delete) User with UID 'user456' attempts to delete the notification of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description User favorites are readable and writable only by the owning user.
      * @path /favorites/{userId}
      * @allow (create) User with UID 'user123' creates their favorites.
      * @allow (get) User with UID 'user123' reads their own favorites.
      * @allow (update) User with UID 'user123' updates their own favorites.
      * @allow (delete) User with UID 'user123' deletes their own favorites.
      * @deny (create) User with UID 'user456' attempts to create favorites for 'user123'.
      * @deny (get) User with UID 'user456' attempts to read the favorites of 'user123'.
      * @deny (update) User with UID 'user456' attempts to update the favorites of 'user123'.
      * @deny (delete) User with UID 'user456' attempts to delete the favorites of 'user123'.
      * @principle Enforces document ownership for writes.
      */
    match /favorites/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Admin-favorited teams are publicly readable, but only writable by admins (not implemented in this example).
     * @path /adminFavorites/{teamId}
     * @allow (get) Any user can read admin favorites.
     * @allow (list) Any user can list admin favorites.
     * @deny (create) Non-admin user attempts to create an admin favorite.
     * @deny (update) Non-admin user attempts to update an admin favorite.
     * @deny (delete) Non-admin user attempts to delete an admin favorite.
     * @principle Public read, admin-only write.
     */
    match /adminFavorites/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check.
      allow update: if false; // TODO: Add admin role check.
      allow delete: if false; // TODO: Add admin role check.
    }

     /**
      * @description League Customizations are readable and writable only by the owning user.
      * @path /leagueCustomizations/{leagueId}
      * @allow (create) User with UID 'user123' creates their league customizations.
      * @allow (get) User with UID 'user123' reads their own league customizations.
      * @allow (update) User with UID 'user123' updates their own league customizations.
      * @allow (delete) User with UID 'user123' deletes their own league customizations.
      * @deny (create) User with UID 'user456' attempts to create league customizations for 'user123'.
      * @deny (get) User with UID 'user456' attempts to read the league customizations of 'user123'.
      * @deny (update) User with UID 'user456' attempts to update the league customizations of 'user123'.
      * @deny (delete) User with UID 'user456' attempts to delete the league customizations of 'user123'.
      * @principle Enforces document ownership for writes.
      */
    match /leagueCustomizations/{leagueId} {
      allow get: if false; //Not possible without user id
      allow list: if false;
      allow create: if false; //Not possible without user id
      allow update: if false; //Not possible without user id
      allow delete: if false; //Not possible without user id
    }

     /**
      * @description Country Customizations are readable and writable only by the owning user.
      * @path /countryCustomizations/{countryName}
      * @allow (create) User with UID 'user123' creates their country customizations.
      * @allow (get) User with UID 'user123' reads their own country customizations.
      * @allow (update) User with UID 'user123' updates their own country customizations.
      * @allow (delete) User with UID 'user123' deletes their own country customizations.
      * @deny (create) User with UID 'user456' attempts to create country customizations for 'user123'.
      * @deny (get) User with UID 'user456' attempts to read the country customizations of 'user123'.
      * @deny (update) User with UID 'user456' attempts to update the country customizations of 'user123'.
      * @deny (delete) User with UID 'user456' attempts to delete the country customizations of 'user123'.
      * @principle Enforces document ownership for writes.
      */
    match /countryCustomizations/{countryName} {
      allow get: if false; //Not possible without user id
      allow list: if false;
      allow create: if false; //Not possible without user id
      allow update: if false; //Not possible without user id
      allow delete: if false; //Not possible without user id
    }

     /**
      * @description Continent Customizations are readable and writable only by the owning user.
      * @path /continentCustomizations/{continentName}
      * @allow (create) User with UID 'user123' creates their continent customizations.
      * @allow (get) User with UID 'user123' reads their own continent customizations.
      * @allow (update) User with UID 'user123' updates their own continent customizations.
      * @allow (delete) User with UID 'user123' deletes their own continent customizations.
      * @deny (create) User with UID 'user456' attempts to create continent customizations for 'user123'.
      * @deny (get) User with UID 'user456' attempts to read the continent customizations of 'user123'.
      * @deny (update) User with UID 'user456' attempts to update the continent customizations of 'user123'.
      * @deny (delete) User with UID 'user456' attempts to delete the continent customizations of 'user123'.
      * @principle Enforces document ownership for writes.
      */
    match /continentCustomizations/{continentName} {
      allow get: if false; //Not possible without user id
      allow list: if false;
      allow create: if false; //Not possible without user id
      allow update: if false; //Not possible without user id
      allow delete: if false; //Not possible without user id
    }

    /**
     * @description Team customizations are readable and writable only by the owning user.
     * @path /teamCustomizations/{teamId}
     * @allow (create) User with UID 'user123' creates team customizations with their UID.
     * @allow (get) User with UID 'user123' reads their own team customizations.
     * @allow (update) User with UID 'user123' updates their own team customizations.
     * @allow (delete) User with UID 'user123' deletes their own team customizations.
     * @deny (create) User with UID 'user456' attempts to create team customizations for 'user123'.
     * @deny (get) User with UID 'user456' attempts to read the team customizations of 'user123'.
     * @deny (update) User with UID 'user456' attempts to update the team customizations of 'user123'.
     * @deny (delete) User with UID 'user456' attempts to delete the team customizations of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /teamCustomizations/{teamId} {
      allow get: if false; //Not possible without user id
      allow list: if false;
      allow create: if false; //Not possible without user id
      allow update: if false; //Not possible without user id
      allow delete: if false; //Not possible without user id
    }

    /**
     * @description Player customizations are readable and writable only by the owning user.
     * @path /playerCustomizations/{playerId}
     * @allow (create) User with UID 'user123' creates player customizations with their UID.
     * @allow (get) User with UID 'user123' reads their own player customizations.
     * @allow (update) User with UID 'user123' updates their own player customizations.
     * @allow (delete) User with UID 'user123' deletes their own player customizations.
     * @deny (create) User with UID 'user456' attempts to create player customizations for 'user123'.
     * @deny (get) User with UID 'user456' attempts to read the player customizations of 'user123'.
     * @deny (update) User with UID 'user456' attempts to update the player customizations of 'user123'.
     * @deny (delete) User with UID 'user456' attempts to delete the player customizations of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /playerCustomizations/{playerId} {
      allow get: if false; //Not possible without user id
      allow list: if false;
      allow create: if false; //Not possible without user id
      allow update: if false; //Not possible without user id
      allow delete: if false; //Not possible without user id
    }

    /**
     * @description Coach customizations are readable and writable only by the owning user.
     * @path /coachCustomizations/{coachId}
     * @allow (create) User with UID 'user123' creates coach customizations with their UID.
     * @allow (get) User with UID 'user123' reads their own coach customizations.
     * @allow (update) User with UID 'user123' updates their own coach customizations.
     * @allow (delete) User with UID 'user123' deletes their own coach customizations.
     * @deny (create) User with UID 'user456' attempts to create coach customizations for 'user123'.
     * @deny (get) User with UID 'user456' attempts to read the coach customizations of 'user123'.
     * @deny (update) User with UID 'user456' attempts to update the coach customizations of 'user123'.
     * @deny (delete) User with UID 'user456' attempts to delete the coach customizations of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /coachCustomizations/{coachId} {
      allow get: if false; //Not possible without user id
      allow list: if false;
      allow create: if false; //Not possible without user id
      allow update: if false; //Not possible without user id
      allow delete: if false; //Not possible without user id
    }

    /**
     * @description Match details are publicly readable, but only writable by admins (not implemented in this example).
     * @path /matches/{matchId}
     * @allow (get) Any user can read match details.
     * @allow (list) Any user can list match details.
     * @deny (create) Non-admin user attempts to create match details.
     * @deny (update) Non-admin user attempts to update match details.
     * @deny (delete) Non-admin user attempts to delete match details.
     * @principle Public read, admin-only write.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check.
      allow update: if false; // TODO: Add admin role check.
      allow delete: if false; // TODO: Add admin role check.
    }

    /**
     * @description Match comments are publicly readable, but require authentication to create, update or delete.
     * @path /matches/{matchId}/comments/{commentId}
     * @allow (get) Any user can read a comment.
     * @allow (list) Any user can list comments.
     * @allow (create) A signed-in user can create a comment.
     * @allow (update) Only the comment owner can update their comment.
     * @allow (delete) Only the comment owner can delete their comment.
     * @deny (create) An anonymous user tries to create a comment.
     * @deny (update) A user attempts to modify a comment they don't own.
     * @deny (delete) A user attempts to delete a comment they don't own.
     * @principle Authenticated users can create, update, and delete their own comments.
     */
    match /matches/{matchId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Managed competitions are publicly readable, but only writable by admins (not implemented in this example).
     * @path /managedCompetitions/{leagueId}
     * @allow (get) Any user can read managed competitions.
     * @allow (list) Any user can list managed competitions.
     * @deny (create) Non-admin user attempts to create a managed competition.
     * @deny (update) Non-admin user attempts to update a managed competition.
     * @deny (delete) Non-admin user attempts to delete a managed competition.
     * @principle Public read, admin-only write.
     */
    match /managedCompetitions/{leagueId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check.
      allow update: if false; // TODO: Add admin role check.
      allow delete: if false; // TODO: Add admin role check.
    }

    /**
     * @description User predictions are readable and writable only by the owning user.
     * @path /predictions/{predictionId}
     * @allow (create) User with UID 'user123' creates a prediction with their UID.
     * @allow (get) User with UID 'user123' reads their own prediction.
     * @allow (update) User with UID 'user123' updates their own prediction.
     * @allow (delete) User with UID 'user123' deletes their own prediction.
     * @deny (create) User with UID 'user456' attempts to create a prediction for 'user123'.
     * @deny (get) User with UID 'user456' attempts to read the prediction of 'user123'.
     * @deny (update) User with UID 'user456' attempts to update the prediction of 'user123'.
     * @deny (delete) User with UID 'user456' attempts to delete the prediction of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /predictions/{predictionId} {
      allow get: if false; //Not possible without user id
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(request.resource.data.userId);
      allow delete: if isExistingOwner(request.resource.data.userId);
    }

   /**
     * @description Leaderboard entries are publicly readable, but only writable by admins (not implemented in this example).
     * @path /leaderboard/{userId}
     * @allow (get) Any user can get a leaderboard entry.
     * @allow (list) Any user can list leaderboard entries.
     * @deny (create) Non-admin user attempts to create a leaderboard entry.
     * @deny (update) Non-admin user attempts to update a leaderboard entry.
     * @deny (delete) Non-admin user attempts to delete a leaderboard entry.
     * @principle Public read, admin-only write.
     */
    match /leaderboard/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check.
      allow update: if false; // TODO: Add admin role check.
      allow delete: if false; // TODO: Add admin role check.
    }

    /**
     * @description Daily Global Predictions are publicly readable, but only writable by admins.
     * @path /dailyGlobalPredictions/{date}
     * @allow (get) Any user can read daily global predictions.
     * @allow (list) Any user can list daily global predictions.
     * @deny (create) Non-admin user attempts to create daily global predictions.
     * @deny (update) Non-admin user attempts to update daily global predictions.
     * @deny (delete) Non-admin user attempts to delete daily global predictions.
     * @principle Public read, admin-only write.
     */
    match /dailyGlobalPredictions/{date} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check.
      allow update: if false; // TODO: Add admin role check.
      allow delete: if false; // TODO: Add admin role check.
    }
  }
}