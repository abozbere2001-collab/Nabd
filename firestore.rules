/**
 * @file Firestore Security Rules for Goal Stack Application
 * @corePhilosophy This ruleset employs a hybrid security model: user-based ownership for profile data and favorites, public read access for shared entities (competitions, teams, matches), and admin-only access for administrative content (news, top entities, customizations). Admin status is determined by the existence of a document in the /admins/{adminId} collection.
 * @dataStructure The database is organized into top-level collections for shared entities (/competitions, /teams, /matches, /news), user subcollections for private data (/users/{userId}/favorites), and dedicated collections for admin-managed content (/admins, /topCompetitions, /leagueCustomizations, etc.).
 * @keySecurityDecisions
 *   - User listing is explicitly denied for enhanced privacy.
 *   - Read access to shared entities (competitions, teams, matches, news) is public.
 *   - Admin privileges are determined by the existence of a document in `/admins/{adminId}`, offering a simple and direct authorization check.
 *   - Write access to admin-managed collections (top entities, customizations) is restricted to admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only signed-in users can access any data.
     * @path /
     * @allow (get, list, create, update, delete) - Only if signed in user.
     * @deny (get, list, create, update, delete) - If not signed in.
     * @principle Requires all requests to be authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by an existing owner of the document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Combines ownership and existence checks for safer updates and deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the request is made by an admin.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Checks for the existence of an admin document to grant admin privileges.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /***************** User Profile Rules *****************/

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's ID matches the requested userId.
     * @deny (get, create, update, delete) if the user is not authenticated or the user's ID does not match the requested userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /***************** Competition Rules *****************/

    /**
     * @description Allows anyone to read competition data, but only admins can create, update, or delete it.
     * @path /competitions/{competitionId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Public read access with admin-only writes.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** Team Rules *****************/

    /**
     * @description Allows anyone to read team data, but only admins can create, update, or delete it.
     * @path /teams/{teamId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Public read access with admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** Match Rules *****************/

    /**
     * @description Allows anyone to read match data.
     * @path /matches/{matchId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Public read access, no write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /***************** News Rules *****************/

    /**
     * @description Allows anyone to read news articles, but only admins can create, update, or delete them.
     * @path /news/{newsId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Public read access with admin-only writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** Admin Rules *****************/

    /**
     * @description Only admins can manage other admin accounts. Normal users cannot read admin data.
     * @path /admins/{adminId}
     * @allow (create, update, delete) to admins only.
     * @deny (get, list) to everyone.
     * @principle Admin-only access.
     */
    match /admins/{adminId} {
      allow get, list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** User Favorites Rules *****************/

    /**
     * @description Allows users to read and write their own favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (get, create, update, delete) if the user's ID matches the requested userId.
     * @deny (get, create, update, delete) if the user is not authenticated or the user's ID does not match the requested userId.
     * @principle Enforces document ownership for user favorites.
     */
    match /users/{userId}/favorites {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Only the owner can read the document, so listing the collection is unnecessary.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /***************** Top Competitions Rules *****************/

    /**
     * @description Allows anyone to read top competition data, but only admins can create, update, or delete it.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Public read access with admin-only writes.
     */
    match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** Top Teams Rules *****************/

    /**
     * @description Allows anyone to read top team data, but only admins can create, update, or delete it.
     * @path /topTeams/{teamId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Public read access with admin-only writes.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** League Customizations Rules *****************/

    /**
     * @description Allows admins to manage league customizations.
     * @path /leagueCustomizations/{leagueId}
     * @allow (create, update, delete) to admins only.
     * @deny (get, list) to everyone.
     * @principle Admin-only access.
     */
    match /leagueCustomizations/{leagueId} {
      allow get, list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** Team Customizations Rules *****************/

    /**
     * @description Allows admins to manage team customizations.
     * @path /teamCustomizations/{teamId}
     * @allow (create, update, delete) to admins only.
     * @deny (get, list) to everyone.
     * @principle Admin-only access.
     */
    match /teamCustomizations/{teamId} {
      allow get, list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** Player Customizations Rules *****************/

    /**
     * @description Allows admins to manage player customizations.
     * @path /playerCustomizations/{playerId}
     * @allow (create, update, delete) to admins only.
     * @deny (get, list) to everyone.
     * @principle Admin-only access.
     */
    match /playerCustomizations/{playerId} {
      allow get, list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** Continent Customizations Rules *****************/

    /**
     * @description Allows admins to manage continent customizations.
     * @path /continentCustomizations/{continentId}
     * @allow (create, update, delete) to admins only.
     * @deny (get, list) to everyone.
     * @principle Admin-only access.
     */
    match /continentCustomizations/{continentId} {
      allow get, list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /***************** Country Customizations Rules *****************/

    /**
     * @description Allows admins to manage country customizations.
     * @path /countryCustomizations/{countryId}
     * @allow (create, update, delete) to admins only.
     * @deny (get, list) to everyone.
     * @principle Admin-only access.
     */
    match /countryCustomizations/{countryId} {
      allow get, list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }
     /***************** Pinned Iraqi Match Rules *****************/

    /**
     * @description Allows admins to manage the pinned Iraqi match.
     * @path /pinnedIraqiMatch/special
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Public read access with admin-only writes.
     */
    match /pinnedIraqiMatch/special {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }
  }
}