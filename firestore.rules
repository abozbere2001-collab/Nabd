/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for profile data, favorite leagues, and favorite teams.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information for each user.
 * - /users/{userId}/favoriteLeagues/{leagueId}: Stores a user's favorite leagues.
 * - /users/{userId}/favoriteTeams/{teamId}: Stores a user's favorite teams.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and associated subcollections.
 * - Listing all users is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read their profile if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update their profile if request.auth.uid == 'user123'.
     * @allow (delete) - User with UID 'user123' can delete their profile if request.auth.uid == 'user123' and the document exists.
     * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) - User with UID 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string && request.resource.data.displayName is string && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's favorite leagues.
     * @path /users/{userId}/favoriteLeagues/{leagueId}
     * @allow (create) - User with UID 'user123' can create a favorite league if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read a favorite league if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update a favorite league if request.auth.uid == 'user123' and the document exists.
     * @allow (delete) - User with UID 'user123' can delete a favorite league if request.auth.uid == 'user123' and the document exists.
     * @deny (create) - User with UID 'user456' cannot create a favorite league for 'user123'.
     * @deny (get) - User with UID 'user456' cannot read the favorite leagues of 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteLeagues/{leagueId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's favorite teams.
     * @path /users/{userId}/favoriteTeams/{teamId}
     * @allow (create) - User with UID 'user123' can create a favorite team if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read a favorite team if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update a favorite team if request.auth.uid == 'user123' and the document exists.
     * @allow (delete) - User with UID 'user123' can delete a favorite team if request.auth.uid == 'user123' and the document exists.
     * @deny (create) - User with UID 'user456' cannot create a favorite team for 'user123'.
     * @deny (get) - User with UID 'user456' cannot read the favorite teams of 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteTeams/{teamId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}