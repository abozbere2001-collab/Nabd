/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, combining user-ownership for personal data with role-based access control for administrative functions and public read access for shared content. It leverages denormalization to avoid complex queries within security rules, ensuring performance and scalability.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, accessible only to the owning user.
 * - Admin profiles are stored under `/admins/{adminId}`, accessible only to admins.
 * - Publicly readable data, such as competitions, teams, and news articles, are stored in top-level collections (e.g., `/competitions`, `/teams`, `/news`).
 * - User-specific data, such as favorites, are stored as a subcollection under the user's document (`/users/{userId}/favorites`).
 *
 * Key Security Decisions:
 * - **Admin Role**: Admin status is determined by the existence of a document in the `/admins/{adminId}` collection, where the document ID matches the user's UID.
 * - **User Data**: Strict user ownership is enforced for data stored under `/users/{userId}`.
 * - **Public Read**: Collections like `/competitions`, `/teams`, and `/news` are publicly readable but writable only by admins.
 * - **No User Listing**: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 * - Admin status is checked by verifying the existence of a document in the `/admins/{adminId}` collection. This avoids the need to store admin roles within user documents and simplifies the `isAdmin()` function.
 * - To avoid using .get() requests in security rules to lookup other documents and data, the document on which the security rules are applied must contain all the information necessary to make the security decision.
 *
 * Structural Segregation:
 * - Publicly readable data (competitions, teams, news) is stored in top-level collections separate from private user data. This simplifies read access and avoids the need for complex filtering based on user roles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the user ID.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     * @example isOwner('user123') == true if request.auth.uid == 'user123'
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by an existing owner of the user ID.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an administrator by verifying the existence of their admin document.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- User Data (Private) ---

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read, write) if the user is the owner (e.g., request.auth.uid == userId).
     * @deny (read, write) if the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to subcollections within a user's document.
     * @path /users/{userId}/{collection}/{docId}
     * @allow (read, write) if the user is the owner (e.g., request.auth.uid == userId).
     * @deny (read, write) if the user is not the owner.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/{collection}/{docId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    
    /**
     * @description Controls access to the user's favorites.
     * @path /users/{userId}/favorites
     * @allow (read, write) if the user is the owner.
     * @deny (read, write) if the user is not the owner.
     * @principle Enforces user-specific data access.
     */
    match /users/{userId}/favorites {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    // --- Admin Data ---

    /**
     * @description Controls access to admin user data.
     * @path /admins/{adminId}
     * @allow (read, write) if the user is an admin.
     * @deny (read, write) if the user is not an admin.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- Publicly Readable Data (Admin Writable) ---

    /**
     * @description Controls access to managed competitions data.
     * @path /managedCompetitions/{competitionId}
     * @allow read if the user is signed in.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /managedCompetitions/{competitionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to search index data.
     * @path /searchIndex/{docId}
     * @allow read if the user is signed in.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /searchIndex/{docId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to news article data.
     * @path /news/{newsId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /news/{newsId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to top competitions data.
     * @path /topCompetitions/{competitionId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /topCompetitions/{competitionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to top teams data.
     * @path /topTeams/{teamId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /topTeams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    /**
     * @description Controls access to league customizations data.
     * @path /leagueCustomizations/{leagueId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /leagueCustomizations/{leagueId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to team customizations data.
     * @path /teamCustomizations/{teamId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /teamCustomizations/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to player customizations data.
     * @path /playerCustomizations/{playerId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /playerCustomizations/{playerId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to continent customizations data.
     * @path /continentCustomizations/{continentId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /continentCustomizations/{continentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to country customizations data.
     * @path /countryCustomizations/{countryId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /countryCustomizations/{countryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to pinned Iraqi matches data.
     * @path /pinnedIraqiMatches/{matchId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /pinnedIraqiMatches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to Iraqi league top scorers data.
     * @path /iraqiLeagueTopScorers/{scorerId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /iraqiLeagueTopScorers/{scorerId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    /**
     * @description Controls access to admin favorites data.
     * @path /adminFavorites/{teamId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /adminFavorites/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to daily global predictions data.
     * @path /dailyGlobalPredictions/{date}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /dailyGlobalPredictions/{date} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    /**
     * @description Controls access to leaderboard data.
     * @path /leaderboard/{userId}
     * @allow read if true.
     * @allow write if the user is an admin.
     * @deny write if the user is not an admin.
     */
    match /leaderboard/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- Mixed Read/Write Collections ---

    /**
     * @description Controls access to matches data.
     * @path /matches/{matchId}
     * @allow read if true.
     * @allow write if the user is an admin (for enabling/disabling comments).
     * @deny write if the user is not an admin.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin(); // Admin can create matches.
      allow update: if isAdmin(); // Admin can update matches.
      allow delete: if isAdmin(); // Admin can delete matches.
    }

    /**
     * @description Controls access to comments on matches.
     * @path /matches/{matchId}/comments/{commentId}
     * @allow read if true.
     * @allow create if the user is signed in.
     * @allow update, delete if the user is the owner of the comment or an admin.
     */
    match /matches/{matchId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.userId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.userId) || isAdmin();
    }

    /**
     * @description Controls access to replies to comments on matches.
     * @path /matches/{matchId}/comments/{commentId}/replies/{replyId}
     * @allow read if true.
     * @allow create if the user is signed in.
     * @allow update, delete if the user is the owner of the reply or an admin.
     */
    match /matches/{matchId}/comments/{commentId}/replies/{replyId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.userId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.userId) || isAdmin();
    }

    /**
     * @description Controls access to likes on comments.
     * @path /matches/{matchId}/comments/{commentId}/likes/{userId}
     * @allow read if true.
     * @allow create, delete if the user is the owner (liking/unliking their own comment).
     */
    match /matches/{matchId}/comments/{commentId}/likes/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isOwner(userId);
    }
    
    /**
     * @description Controls access to likes on replies.
     * @path /matches/{matchId}/comments/{commentId}/replies/{replyId}/likes/{userId}
     * @allow read if true.
     * @allow create, delete if the user is the owner (liking/unliking their own reply).
     */
    match /matches/{matchId}/comments/{commentId}/replies/{replyId}/likes/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to predictions.
     * @path /predictions/{predictionId}
     * @allow read if the user is the owner or an admin.
     * @allow create, update if the user is the owner.
     * @deny delete.
     */
    match /predictions/{predictionId} {
      allow get: if isOwner(predictionId.split('_')[0]) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(predictionId.split('_')[0]);
      allow update: if isExistingOwner(predictionId.split('_')[0]);
      allow delete: if false;
    }
    
    /**
     * @description Controls access to public season predictions.
     * @path /publicSeasonPredictions/{predictionId}
     * @allow read if true.
     * @allow create, update if the user is the owner.
     * @deny delete.
     */
    match /publicSeasonPredictions/{predictionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(predictionId.split('_')[0]);
      allow update: if isExistingOwner(predictionId.split('_')[0]);
      allow delete: if false;
    }
  }
}