/**
 * @file Firestore Security Rules for Goal Stack Application
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data and restricts administrative data modification to authenticated admins. Read access is generally public for shared entities, while write access is carefully controlled.
 * @data_structure The Firestore database is organized into collections for users, competitions, teams, matches, news, and admins. User-specific data (favorites) is nested under /users/{userId}. Admin-managed data resides in top-level collections.
 * @key_security_decisions
 *   - User listing is disallowed for privacy.
 *   - Admin status is determined by the presence of a document in the `/admins/{adminId}` collection.
 *   - Public read access is granted to shared entity collections (e.g., /competitions, /teams, /matches, /news).
 *   - All write operations are guarded by authorization checks based on ownership or admin status.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of their document in the `/admins` collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their profile with matching userId.
     * @allow (get, update, delete) - User with ID 'user123' reads/updates/deletes their own profile.
     * @deny (create) - User with ID 'user456' tries to create a profile for 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' tries to read/update/delete profile of 'user123'.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for competitions.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Any user can read competition data.
     * @allow (create, update, delete) - Only admins can create, update, or delete competition data.
     * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete competition data.
     * @principle Public read access with admin-only writes.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for teams.
     * @path /teams/{teamId}
     * @allow (get, list) - Any user can read team data.
     * @allow (create, update, delete) - Only admins can create, update, or delete team data.
     * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete team data.
     * @principle Public read access with admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for matches.
     * @path /matches/{matchId}
     * @allow (get, list) - Any user can read match data.
     * @deny (create, update, delete) - No one can create, update, or delete match data.
     * @principle Public read access only.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for news articles.
     * @path /news/{newsId}
     * @allow (get, list) - Any user can read news articles.
     * @allow (create, update, delete) - Only admins can create, update, or delete news articles.
     * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete news articles.
     * @principle Public read access with admin-only writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for admins.
     * @path /admins/{adminId}
     * @allow (create, update, delete) - Only admins can create, update, or delete other admin accounts.
     * @deny (get, list) - Non-admins can not read admin accounts.
     * @principle Restricts admin management to existing admins.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user favorites.
     * @path /users/{userId}/favorites
     * @allow (create, get, update, delete) - Only the user can read/write their own favorites.
     * @deny (create, get, update, delete) - Other users cannot read/write another user's favorites.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/favorites {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for top competitions.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) - Any user can read top competition data.
     * @allow (create, update, delete) - Only admins can create, update, or delete top competition data.
     * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete top competition data.
     * @principle Public read access with admin-only writes.
     */
    match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for top teams.
     * @path /topTeams/{teamId}
     * @allow (get, list) - Any user can read top team data.
     * @allow (create, update, delete) - Only admins can create, update, or delete top team data.
     * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete top team data.
     * @principle Public read access with admin-only writes.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
   /**
    * @description Rules for league customizations.
    * @path /leagueCustomizations/{leagueId}
    * @allow (get, list) - Any user can read league customization data.
    * @allow (create, update, delete) - Only admins can create, update, or delete league customization data.
    * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete league customization data.
    * @principle Admin-only writes.
    */
    match /leagueCustomizations/{leagueId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for team customizations.
     * @path /teamCustomizations/{teamId}
     * @allow (get, list) - Any user can read team customization data.
     * @allow (create, update, delete) - Only admins can create, update, or delete team customization data.
     * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete team customization data.
     * @principle Admin-only writes.
     */
    match /teamCustomizations/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

   /**
    * @description Rules for player customizations.
    * @path /playerCustomizations/{playerId}
    * @allow (get, list) - Any user can read player customization data.
    * @allow (create, update, delete) - Only admins can create, update, or delete player customization data.
    * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete player customization data.
    * @principle Admin-only writes.
    */
    match /playerCustomizations/{playerId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for match customizations.
     * @path /matchCustomizations/{fixtureId}
     * @allow (get, list) - Any user can read match customization data.
     * @allow (create, update, delete) - Only admins can create, update, or delete match customization data.
     * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete match customization data.
     * @principle Admin-only writes.
     */
    match /matchCustomizations/{fixtureId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for continent customizations.
     * @path /continentCustomizations/{continentId}
     * @allow (get, list) - Any user can read continent customization data.
     * @allow (create, update, delete) - Only admins can create, update, or delete continent customization data.
     * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete continent customization data.
     * @principle Admin-only writes.
     */
    match /continentCustomizations/{continentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for country customizations.
     * @path /countryCustomizations/{countryId}
     * @allow (get, list) - Any user can read country customization data.
     * @allow (create, update, delete) - Only admins can create, update, or delete country customization data.
     * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete country customization data.
     * @principle Admin-only writes.
     */
    match /countryCustomizations/{countryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for pinned Iraqi matches.
     * @path /pinnedIraqiMatches/{matchId}
     * @allow (get, list) - Any user can read pinned Iraqi match data.
     * @allow (create, update, delete) - Only admins can create, update, or delete pinned Iraqi match data.
     * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete pinned Iraqi match data.
     * @principle Admin-only writes.
     */
    match /pinnedIraqiMatches/{matchId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
     /**
      * @description Rules for managed competitions.  This addresses the original error in the prompt.
      * @path /managedCompetitions/{competitionId}
      * @allow (get, list) - Any user can read managed competition data.
      * @allow (create, update, delete) - Only admins can create, update, or delete managed competition data.
      * @deny (create, update, delete) - Non-admin user attempts to create, update, or delete managed competition data.
      * @principle Admin-only writes.
      */
     match /managedCompetitions/{competitionId} {
       allow get, list: if true;
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
     }
  }
}