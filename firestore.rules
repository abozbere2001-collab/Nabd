/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and favorites,
 * and restricts admin-only access for managing competitions, teams, news, and admins.
 * Public read access is granted for certain collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /competitions/{competitionId}: Stores competition data.
 * - /teams/{teamId}: Stores team data.
 * - /matches/{matchId}: Stores match data.
 * - /news/{newsId}: Stores news articles.
 * - /admins/{adminId}: Stores admin user data.
 * - /users/{userId}/favorites: Stores user's favorite teams and competitions.
 * - /topCompetitions/{competitionId}: Stores admin selected top competitions
 * - /topTeams/{teamId}: Stores admin selected top teams
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Admin privileges are determined by the existence of an admin document.
 * - Public read access is granted for competitions, teams, matches and news.
 * - Admin management of various customization collections.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of a document in `/admins/{adminId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request.auth.uid matches the userId.
     * @deny (get, create, update, delete) if the request.auth.uid does not match the userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to competition data, but restricts create, update, and delete to admins only.
     * @path /competitions/{competitionId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) to admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Grants public read access while restricting write access to admins.
     */
    match /competitions/{competitionId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to team data, but restricts create, update, and delete to admins only.
     * @path /teams/{teamId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) to admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Grants public read access while restricting write access to admins.
     */
    match /teams/{teamId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) to everyone.
     * @deny (create, update, delete) to everyone.
     * @principle Grants public read access to match data.
     */
    match /matches/{matchId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to news articles, but restricts create, update, and delete to admins only.
     * @path /news/{newsId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) to admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Grants public read access while restricting write access to admins.
     */
    match /news/{newsId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage other admins. Normal users cannot read admin data.
     * @path /admins/{adminId}
     * @allow (create, update, delete) to admins.
     * @deny (get, list) to everyone.
     * @deny (create, update, delete) to non-admins.
     * @principle Restricts admin management to existing admins.
     */
    match /admins/{adminId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows users to read and write their own favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (get, create, update, delete) if the request.auth.uid matches the userId.
     * @deny (get, create, update, delete) if the request.auth.uid does not match the userId.
     * @principle Enforces document ownership for user favorites.
     */
    match /users/{userId}/favorites {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) ;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
	  /**
     * @description Allows public read access to top competition data, but restricts create, update, and delete to admins only.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) to admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Grants public read access while restricting write access to admins.
     */
    match /topCompetitions/{competitionId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

      /**
     * @description Allows public read access to top teams data, but restricts create, update, and delete to admins only.
     * @path /topTeams/{teamId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) to admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Grants public read access while restricting write access to admins.
     */
    match /topTeams/{teamId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
    
    /**
     * @description Allows admins to manage league customizations.
     * @path /leagueCustomizations/{leagueId}
     */
    match /leagueCustomizations/{leagueId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage team customizations.
     * @path /teamCustomizations/{teamId}
     */
    match /teamCustomizations/{teamId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage player customizations.
     * @path /playerCustomizations/{playerId}
     */
    match /playerCustomizations/{playerId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Allows admins to manage match customizations.
     * @path /matchCustomizations/{fixtureId}
     */
    match /matchCustomizations/{fixtureId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Allows admins to manage continent customizations.
     * @path /continentCustomizations/{continentId}
     */
    match /continentCustomizations/{continentId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage country customizations.
     * @path /countryCustomizations/{countryId}
     */
    match /countryCustomizations/{countryId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
     /**
     * @description Allows admins to manage the pinned Iraqi matches.
     * @path /pinnedIraqiMatches/{matchId}
     */
    match /pinnedIraqiMatches/{matchId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}