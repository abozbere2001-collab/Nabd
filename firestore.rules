/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and favorites,
 * and restricts write access to admin users for competitions, teams, and news.
 * Read access is generally public unless explicitly restricted (e.g., admin data).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user.
 * - /competitions/{competitionId}: Stores competition data, publicly readable, admin-writeable.
 * - /teams/{teamId}: Stores team data, publicly readable, admin-writeable.
 * - /matches/{matchId}: Stores match data, publicly readable.
 * - /news/{newsId}: Stores news articles, publicly readable, admin-writeable.
 * - /admins/{adminId}: Stores admin user data, only accessible by admins.
 * - /users/{userId}/favorites: Stores user's favorite teams and competitions, accessible only by the user.
 * - /topCompetitions/{competitionId}: Stores top competitions, publicly readable, admin-writeable.
 * - /topTeams/{teamId}: Stores top teams, publicly readable, admin-writeable.
 * - /leagueCustomizations/{leagueId}: Stores custom league names, only accessible by admins.
 * - /teamCustomizations/{teamId}: Stores custom team names, only accessible by admins.
 * - /playerCustomizations/{playerId}: Stores custom player names, only accessible by admins.
 * - /continentCustomizations/{continentId}: Stores custom continent names, only accessible by admins.
 * - /countryCustomizations/{countryId}: Stores custom country names, only accessible by admins.
 * - /pinnedIraqiMatch/special: Stores data about a pinned Iraqi match, admin-writeable.
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the owning user.
 * - Competitions, teams, and news are publicly readable but admin-managed.
 * - Admin status is determined by the existence of a document in the `/admins` collection.
 * - Listing of admins is disallowed for security reasons.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   request.auth.uid == 'user123'
     *   request.resource.data.id == 'user123'
     * @allow (get) User with ID 'user123' reads their profile.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates their profile.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' tries to create profile for 'user456'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.id == 'user456'
     * @deny (delete) Non-owner tries to delete the user profile.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to competitions and restricts write access to admins.
     * @path /competitions/{competitionId}
     * @allow (get) Any user can read a competition.
     * @allow (list) Any user can list competitions.
     * @allow (create) Admin creates a new competition.
     *   isAdmin() == true
     * @deny (create) Non-admin tries to create a competition.
     *   isAdmin() == false
     * @principle Restricts write access to admin users.
     */
    match /competitions/{competitionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to teams and restricts write access to admins.
     * @path /teams/{teamId}
     * @allow (get) Any user can read a team.
     * @allow (list) Any user can list teams.
     * @allow (create) Admin creates a new team.
     *   isAdmin() == true
     * @deny (create) Non-admin tries to create a team.
     *   isAdmin() == false
     * @principle Restricts write access to admin users.
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to matches.
     * @path /matches/{matchId}
     * @allow (get) Any user can read a match.
     * @allow (list) Any user can list matches.
     * @deny (create) No one can create matches.
     * @deny (update) No one can update matches.
     * @deny (delete) No one can delete matches.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to news articles and restricts write access to admins.
     * @path /news/{newsId}
     * @allow (get) Any user can read a news article.
     * @allow (list) Any user can list news articles.
     * @allow (create) Admin creates a new news article.
     *   isAdmin() == true
     * @deny (create) Non-admin tries to create a news article.
     *   isAdmin() == false
     * @principle Restricts write access to admin users.
     */
    match /news/{newsId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts access to admin data to only admin users.
     * @path /admins/{adminId}
     * @allow (create) Admin creates another admin profile.
     *   isAdmin() == true
     * @deny (get) Non-admin tries to read admin data.
     *   isAdmin() == false
     * @deny (list) Listing admins is not allowed.
     * @deny (update) Non-admin tries to update admin data.
     *   isAdmin() == false
     * @principle Restricts access to admin data.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Enforces user-ownership for user favorites.
     * @path /users/{userId}/favorites
     * @allow (create) User with ID 'user123' creates their favorites.
     *   request.auth.uid == 'user123'
     *   request.resource.data.userId == 'user123'
     * @allow (get) User with ID 'user123' reads their favorites.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates their favorites.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' tries to create favorites for 'user456'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.userId == 'user456'
     * @deny (delete) Non-owner tries to delete the user favorites.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/favorites {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to top competitions and restricts write access to admins.
     * @path /topCompetitions/{competitionId}
     * @allow (get) Any user can read a top competition.
     * @allow (list) Any user can list top competitions.
     * @allow (create) Admin creates a new top competition.
     *   isAdmin() == true
     * @deny (create) Non-admin tries to create a top competition.
     *   isAdmin() == false
     * @principle Restricts write access to admin users.
     */
    match /topCompetitions/{competitionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to top teams and restricts write access to admins.
     * @path /topTeams/{teamId}
     * @allow (get) Any user can read a top team.
     * @allow (list) Any user can list top teams.
     * @allow (create) Admin creates a new top team.
     *   isAdmin() == true
     * @deny (create) Non-admin tries to create a top team.
     *   isAdmin() == false
     * @principle Restricts write access to admin users.
     */
    match /topTeams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts write access to custom league names to admins.
     * @path /leagueCustomizations/{leagueId}
     */
    match /leagueCustomizations/{leagueId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts write access to custom team names to admins.
     * @path /teamCustomizations/{teamId}
     */
    match /teamCustomizations/{teamId} {
       allow get: if isAdmin();
       allow list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts write access to custom player names to admins.
     * @path /playerCustomizations/{playerId}
     */
    match /playerCustomizations/{playerId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts write access to custom continent names to admins.
     * @path /continentCustomizations/{continentId}
     */
    match /continentCustomizations/{continentId} {
      allow get: if isAdmin();
       allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts write access to custom country names to admins.
     * @path /countryCustomizations/{countryId}
     */
    match /countryCustomizations/{countryId} {
      allow get: if isAdmin();
       allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

       /**
        * @description Restricts write access to the pinned Iraqi match details to admins.
        * @path /pinnedIraqiMatch/special
        */
       match /pinnedIraqiMatch/special {
           allow get: if isAdmin();
           allow list: if isAdmin();
           allow create: if isAdmin();
           allow update: if isAdmin() && resource != null;
           allow delete: if isAdmin() && resource != null;
       }

    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}