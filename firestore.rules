/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a balance between security and rapid prototyping.
 * It implements strict user ownership for personal data and restricts
 * administrative privileges based on admin document existence. Read access
 * is generally open for shared entities, while write access is carefully
 * controlled.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /competitions/{competitionId}: Stores football competition data.
 * - /teams/{teamId}: Stores football team data.
 * - /matches/{matchId}: Stores match data.
 * - /news/{newsId}: Stores news articles.
 * - /admins/{adminId}: Presence of a document signifies admin role.
 * - /users/{userId}/favorites: Stores user's favorite teams and competitions.
 * - /topCompetitions/{competitionId}: Stores top competitions marked by admins.
 * - /topTeams/{teamId}: Stores top teams marked by admins.
 * - /leagueCustomizations/{leagueId}: Stores custom names for leagues set by admins.
 * - /teamCustomizations/{teamId}: Stores custom names for teams set by admins.
 * - /playerCustomizations/{playerId}: Stores custom names for players set by admins.
 * - /continentCustomizations/{continentId}: Stores custom names for continents set by admins.
 * - /countryCustomizations/{countryId}: Stores custom names for countries set by admins.
 * - /pinnedIraqiMatches/{matchId}: Stores details of pinned Iraqi matches, managed by admins.
 *
 * Key Security Decisions:
 * - Public read access for competitions, teams, matches, and news.
 * - Strict user-ownership for user profiles and favorites.
 * - Admin privileges granted based on the existence of a document in /admins/{adminId}.
 * - Customization data restricted to admin-only access.
 * - No user listing allowed for the /users collection for privacy.
 *
 * Denormalization for Authorization:
 *   - The application relies on the existence of an `/admins/{adminId}` document
 *     to determine admin privileges. This avoids needing complex role-based checks
 *     within the documents themselves.
 *
 * Structural Segregation:
 *   - Publicly readable data (competitions, teams, matches, news) is stored in
 *     separate top-level collections to simplify read rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creating their own profile.
     * @allow (get, update, delete) - Authenticated user accessing their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create, update, delete) - Non-authenticated user or another user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can modify.
     * @deny (create, update, delete) - Non-admins cannot modify.
     * @principle Grants public read access but restricts writes to admins.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages team data.
     * @path /teams/{teamId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can modify.
     * @deny (create, update, delete) - Non-admins cannot modify.
     * @principle Grants public read access but restricts writes to admins.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages match data.
     * @path /matches/{matchId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No writes allowed.
     * @principle Provides public read access with no write permissions.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages news articles.
     * @path /news/{newsId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can modify.
     * @deny (create, update, delete) - Non-admins cannot modify.
     * @principle Grants public read access but restricts writes to admins.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages admin user data. Existence implies admin status.
     * @path /admins/{adminId}
     * @allow (create, update, delete) - Only existing admins can modify.
     * @deny (get, list) - Normal users can't read.
     * @principle Restricts access to admin data to existing admins.
     */
    match /admins/{adminId} {
      allow get, list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages user's favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (create, get, update, delete) - Only the user can modify.
     * @deny (list) - Listing all favorites is not allowed.
     * @deny (create, update, delete) - Non-authenticated user or another user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/favorites {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

	/**
     * @description Manages top competitions marked by admins.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can modify.
     * @deny (create, update, delete) - Non-admins cannot modify.
     */
    match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages top teams marked by admins.
     * @path /topTeams/{teamId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can modify.
     * @deny (create, update, delete) - Non-admins cannot modify.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Stores custom names for leagues set by admins.
     * @path /leagueCustomizations/{leagueId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can modify.
     * @deny (create, update, delete) - Non-admins cannot modify.
     */
    match /leagueCustomizations/{leagueId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Stores custom names for teams set by admins.
     * @path /teamCustomizations/{teamId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can modify.
     * @deny (create, update, delete) - Non-admins cannot modify.
     */
    match /teamCustomizations/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores custom names for players set by admins.
     * @path /playerCustomizations/{playerId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can modify.
     * @deny (create, update, delete) - Non-admins cannot modify.
     */
    match /playerCustomizations/{playerId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores custom names for continents set by admins.
     * @path /continentCustomizations/{continentId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can modify.
     * @deny (create, update, delete) - Non-admins cannot modify.
     */
    match /continentCustomizations/{continentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores custom names for countries set by admins.
     * @path /countryCustomizations/{countryId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can modify.
     * @deny (create, update, delete) - Non-admins cannot modify.
     */
    match /countryCustomizations/{countryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores the details of a pinned Iraqi match, managed by an admin.
     * @path /pinnedIraqiMatches/{matchId}
     */
     match /pinnedIraqiMatches/{matchId} {
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}