/**
 * @file Firebase Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, combining public read access for shared entities (competitions, teams, matches, news) with strict user-ownership for user-specific data (user profiles, favorites). Administrative privileges are determined by the existence of an admin document.
 *
 * Data Structure:
 * - User data is stored under `/users/{userId}`.
 * - Shared entities like competitions, teams, matches and news reside in top-level collections (`/competitions/{competitionId}`, `/teams/{teamId}`, `/matches/{matchId}`, `/news/{newsId}`).
 * - User favorites are stored in a subcollection `/users/{userId}/favorites`.
 * - Admin data (presence determines authorization level) is under `/admins/{adminId}`.
 * - Customization data (custom names) is stored under collections with specific entity types such as: `/leagueCustomizations/{leagueId}`, `/teamCustomizations/{teamId}`, `/playerCustomizations/{playerId}`, `/continentCustomizations/{continentId}`, and `/countryCustomizations/{countryId}`
 * - Pinned Iraqi Match data is stored at `/pinnedIraqiMatch/special`
 *
 * Key Security Decisions:
 * - Public read access is granted to competitions, teams, matches, and news.
 * - Only the authenticated user can manage their own profile and favorites.
 * - Administrative access is required to create, update, and delete competitions, teams, news, and admin documents themselves.
 * - Listing of admin documents is forbidden.
 * - The rules do not enforce strict schema validation in this prototype phase, but enforce key authorization and relational integrity checks.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of a document under `/admins/{adminId}`. This avoids the need to store admin status within user profiles and simplifies admin role checks in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) If the authenticated user's ID matches the userId path parameter.
     * @allow (get, list, update, delete) If the authenticated user's ID matches the userId path parameter.
     * @deny (create, get, list, update, delete) If the authenticated user's ID does not match the userId path parameter.
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow create: if isOwner(userId);
      allow get, list, update, delete: if isOwner(userId);
    }

    /**
     * @description Controls access to competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete competitions.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete competitions.
     * @principle Public read access with admin-only writes.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Controls access to team data.
     * @path /teams/{teamId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete teams.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete teams.
     * @principle Public read access with admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Controls access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) Public read access.
     * @deny (create, update, delete) No one can create, update, or delete matches.
     * @principle Public read access with no writes allowed.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to news articles.
     * @path /news/{newsId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete news articles.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete news articles.
     * @principle Public read access with admin-only writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Controls access to admin user data.
     * @path /admins/{adminId}
     * @deny get, list: Admins cannot be listed or read directly. Existence is checked in rules.
     * @allow create: if request.auth.uid == adminId && !exists(/databases/$(database)/documents/admins/$(adminId));
     * @allow update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
     * @principle Admin-only management with no listing.
     */
    match /admins/{adminId} {
      allow get, list: if false;
      allow create: if request.auth.uid == adminId && !exists(/databases/$(database)/documents/admins/$(adminId));
      allow update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid)) && resource != null;
    }

    /**
     * @description Controls access to user's favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (create, get, list, update, delete) If the authenticated user's ID matches the userId path parameter.
     * @deny (create, get, list, update, delete) If the authenticated user's ID does not match the userId path parameter.
     * @principle Enforces user-ownership for user favorites.
     */
    match /users/{userId}/favorites {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow create: if isOwner(userId);
      allow get, list, update, delete: if isOwner(userId);
    }
	
    /**
     * @description Controls access to top competition data (marked by admins).
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete top competitions.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete top competitions.
     * @principle Public read access with admin-only writes.
     */
    match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

     /**
      * @description Controls access to top teams data (marked by admins).
      * @path /topTeams/{teamId}
      * @allow (get, list) Public read access.
      * @allow (create, update, delete) Only admins can create, update, or delete top teams.
      * @deny (create, update, delete) Non-admins cannot create, update, or delete top teams.
      * @principle Public read access with admin-only writes.
      */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Controls access to league customizations data.
     * @path /leagueCustomizations/{leagueId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete league customizations.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete league customizations.
     * @principle Public read access with admin-only writes.
     */
    match /leagueCustomizations/{leagueId} {
        allow get, list: if true;
        allow create, update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Controls access to team customizations data.
     * @path /teamCustomizations/{teamId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete team customizations.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete team customizations.
     * @principle Public read access with admin-only writes.
     */
    match /teamCustomizations/{teamId} {
        allow get, list: if true;
        allow create, update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Controls access to player customizations data.
     * @path /playerCustomizations/{playerId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete player customizations.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete player customizations.
     * @principle Public read access with admin-only writes.
     */
    match /playerCustomizations/{playerId} {
        allow get, list: if true;
        allow create, update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Controls access to continent customizations data.
     * @path /continentCustomizations/{continentId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete continent customizations.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete continent customizations.
     * @principle Public read access with admin-only writes.
     */
    match /continentCustomizations/{continentId} {
        allow get, list: if true;
        allow create, update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Controls access to country customizations data.
     * @path /countryCustomizations/{countryId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete country customizations.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete country customizations.
     * @principle Public read access with admin-only writes.
     */
    match /countryCustomizations/{countryId} {
        allow get, list: if true;
        allow create, update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Controls access to pinned Iraqi match data.
     * @path /pinnedIraqiMatch/special
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can create, update, or delete pinned Iraqi match data.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete pinned Iraqi match data.
     * @principle Public read access with admin-only writes.
     */
    match /pinnedIraqiMatch/special {
        allow get, list: if true;
        allow create, update, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}