/**
 * @fileoverview Firestore Security Rules for the Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and restricts
 * write access to other collections based on admin privileges. Data is denormalized
 * where necessary to avoid costly `get()` calls within security rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /matches/{matchId}: Stores match data, publicly readable, writes restricted to admins.
 * - /competitions/{competitionId}: Stores competition data, publicly readable, writes restricted to admins.
 * - /teams/{teamId}: Stores team data, publicly readable, writes restricted to admins.
 * - /news/{newsId}: Stores news articles, publicly readable, writes restricted to admins, the News article must contain an `authorId`
 * - /admins/{adminId}: Stores administrator user data. Existence grants admin privileges.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Read-only access is granted to the matches, competitions, teams, and news collections.
 * - Write access to matches, competitions, teams and news collections is restricted to admins.
 *
 * Denormalization for Authorization:
 * - The `favoriteTeamIds`, `favoriteCompetitionIds`, and `favoriteMatchIds` arrays are denormalized
 *   within the `/users/{userId}` document to eliminate the need for `get()` calls when accessing related data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile: auth.uid == 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read/write their profile: auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123': auth.uid != 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot read/write the profile for 'user123': auth.uid != 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // function to check if the user is the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // function to check if the user is an existing owner
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource.data);
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure match data. Publicly readable, only admins can write.
     * @path /matches/{matchId}
     * @allow (get, list) Anyone can read match data.
     * @allow (create, update, delete) Admins can create, update, and delete match data.
     * @deny (create, update, delete) Non-admins cannot write match data.
     * @principle Restricts write access based on admin privileges.
     */
    match /matches/{matchId} {
      allow get, list: if true;

      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secure competition data. Publicly readable, only admins can write.
     * @path /competitions/{competitionId}
     * @allow (get, list) Anyone can read competition data.
     * @allow (create, update, delete) Admins can create, update, and delete competition data.
     * @deny (create, update, delete) Non-admins cannot write competition data.
     * @principle Restricts write access based on admin privileges.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;

      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secure team data. Publicly readable, only admins can write.
     * @path /teams/{teamId}
     * @allow (get, list) Anyone can read team data.
     * @allow (create, update, delete) Admins can create, update, and delete team data.
     * @deny (create, update, delete) Non-admins cannot write team data.
     * @principle Restricts write access based on admin privileges.
     */
    match /teams/{teamId} {
      allow get, list: if true;

      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secure news articles. Publicly readable, only admins can write.
     * @path /news/{newsId}
     * @allow (get, list) Anyone can read news articles.
     * @allow (create, update, delete) Admins can create, update, and delete news articles.
     * @deny (create, update, delete) Non-admins cannot write news articles.
     * @principle Restricts write access based on admin privileges.
     */
    match /news/{newsId} {
      allow get, list: if true;

      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secure admin data. Only admins can create other admins.
     * @path /admins/{adminId}
     * @allow (create) Admins can create other admins.
     * @allow (get) Anyone can get the admin's data
     * @allow (update, delete) Only the admin themselves can update/delete their own record.
     * @deny (create, update, delete) Non-admins cannot create, update or delete admins.
     * @principle Restricts admin management to existing admins.
     */
    match /admins/{adminId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      function isOwner(adminId) {
        return request.auth.uid == adminId;
      }

       // function to check if the user is an existing owner
      function isExistingOwner(adminId) {
        return isOwner(adminId) && exists(resource.data);
      }

      allow get: if true; //Allow anyone to check for an admin

      allow list: if false;

      allow create: if isAdmin();
      allow update: if isExistingOwner(adminId);
      allow delete: if isExistingOwner(adminId);
    }
  }
}