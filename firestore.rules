/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and favorites,
 * allows public read access to competitions, teams, matches, and news, and restricts
 * write access to these entities to administrators only. Admin status is determined
 * by the existence of a document in the `/admins/{adminId}` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /competitions/{competitionId}: Stores competition data.
 * - /teams/{teamId}: Stores team data.
 * - /matches/{matchId}: Stores match data.
 * - /news/{newsId}: Stores news articles.
 * - /admins/{adminId}: Stores admin user data; existence implies admin status.
 * - /users/{userId}/favorites: Stores user's favorite teams and competitions.
 * - /topCompetitions/{competitionId}: Stores top competitions marked by admins.
 * - /topTeams/{teamId}: Stores top teams marked by admins.
 * - /leagueCustomizations/{leagueId}: Stores custom names for leagues.
 * - /teamCustomizations/{teamId}: Stores custom names for teams.
 * - /playerCustomizations/{playerId}: Stores custom names for players.
 * - /matchCustomizations/{matchId}: Stores custom statuses for matches.
 * - /continentCustomizations/{continentId}: Stores custom names for continents.
 * - /countryCustomizations/{countryId}: Stores custom names for countries.
 * - /pinnedIraqiMatches/{matchId}: Stores data for matches pinned by admins.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Admin status is determined by document existence in `/admins/{adminId}`.
 * - Public read access is granted to competitions, teams, matches, and news.
 * - All write operations on competitions, teams, matches, and news are restricted to admins.
 * - Customization collections are writeable only by admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Authenticated user can get, update, and delete their own profile if the userId matches their auth.uid.
     * @deny (create) - If the userId doesn't match the authenticated user's id
     * @deny (get, list, update, delete) - If the userId doesn't match the authenticated user's id
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
          return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Anyone can read competition data.
     * @allow (create, update, delete) - Only admins can create, update, or delete competition data.
     * @deny (create, update, delete) - Non-admins cannot modify competition data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to team data.
     * @path /teams/{teamId}
     * @allow (get, list) - Anyone can read team data.
     * @allow (create, update, delete) - Only admins can create, update, or delete team data.
     * @deny (create, update, delete) - Non-admins cannot modify team data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) - Anyone can read match data.
     * @deny (create, update, delete) - No one can create, update, or delete match data through client app.
     * @principle Allows public read access and restricts write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to news articles.
     * @path /news/{newsId}
     * @allow (get, list) - Anyone can read news articles.
     * @allow (create, update, delete) - Only admins can create, update, or delete news articles.
     * @deny (create, update, delete) - Non-admins cannot modify news articles.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to admin user data.
     * @path /admins/{adminId}
     * @allow (get) - No one can read admin data, except via the `isAdmin()` function.
     * @allow (create, update, delete) - Only admins can create, update, or delete other admins.
     * @deny (create, update, delete) - Non-admins cannot modify admin data.
     * @principle Restricts admin management to existing admins.
     */
    match /admins/{adminId} {
      allow get: if false;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to user's favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (create, get, update, delete) - Authenticated user can manage their own favorites.
     * @deny (create, get, update, delete) - If the userId doesn't match the authenticated user's id
     * @principle Enforces document ownership for user favorites.
     */
    match /users/{userId}/favorites {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
          return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }
    /**
     * @description Controls access to top competitions marked by admins.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) - Anyone can read the top competitions.
     * @allow (create, update, delete) - Only admins can create, update or delete top competitions.
     */
     match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to top teams marked by admins.
     * @path /topTeams/{teamId}
     * @allow (get, list) - Anyone can read the top teams.
     * @allow (create, update, delete) - Only admins can create, update or delete top teams.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    /**
     * @description Controls access to custom league names.
     * @path /leagueCustomizations/{leagueId}
     * @allow (get, list) - Anyone can read custom league names.
     * @allow (create, update, delete) - Only admins can create, update or delete custom league names.
     */
    match /leagueCustomizations/{leagueId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to custom team names.
     * @path /teamCustomizations/{teamId}
     * @allow (get, list) - Anyone can read custom team names.
     * @allow (create, update, delete) - Only admins can create, update or delete custom team names.
     */
    match /teamCustomizations/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
     /**
     * @description Controls access to custom player names.
     * @path /playerCustomizations/{playerId}
     * @allow (get, list) - Anyone can read custom player names.
     * @allow (create, update, delete) - Only admins can create, update or delete custom player names.
     */
    match /playerCustomizations/{playerId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to custom match statuses.
     * @path /matchCustomizations/{matchId}
     * @allow (get, list) - Anyone can read custom match statuses.
     * @allow (create, update, delete) - Only admins can create, update or delete custom match statuses.
     */
    match /matchCustomizations/{matchId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
     /**
     * @description Controls access to custom continent names.
     * @path /continentCustomizations/{continentId}
     * @allow (get, list) - Anyone can read custom continent names.
     * @allow (create, update, delete) - Only admins can create, update or delete custom continent names.
     */
    match /continentCustomizations/{continentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to custom country names.
     * @path /countryCustomizations/{countryId}
     * @allow (get, list) - Anyone can read custom country names.
     * @allow (create, update, delete) - Only admins can create, update or delete custom country names.
     */
    match /countryCustomizations/{countryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
     /**
     * @description Controls access to pinned Iraqi matches.
     * @path /pinnedIraqiMatches/{matchId}
     * @allow (get, list) - Anyone can read pinned Iraqi matches.
     * @allow (create, update, delete) - Only admins can create, update or delete pinned Iraqi matches.
     */
    match /pinnedIraqiMatches/{matchId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}