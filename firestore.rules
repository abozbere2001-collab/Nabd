/**
 * @file Firestore Security Rules for Goal Stack
 * @version Prototyping
 *
 * @Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access. Users can only manage their own data under their user ID.
 * Read access is generally public for shared entities (teams, competitions, matches, news), while write access to those collections is restricted to admins.
 * Admin status is determined by the presence of a document in the `/admins/{adminId}` collection.
 *
 * @Data Structure:
 * - `/users/{userId}`: User profile information, accessible only by the user.
 * - `/competitions/{competitionId}`, `/teams/{teamId}`, `/matches/{matchId}`, `/news/{newsId}`: Publicly readable data about competitions, teams, matches and news; write access restricted to admins.
 * - `/admins/{adminId}`: Admin user data; only admins can create, update, or delete.
 * - `/users/{userId}/favorites`: User's favorite teams and competitions; accessible only by the user.
 * - `/topCompetitions/{competitionId}`, `/topTeams/{teamId}`: Top competitions and teams, managed by admins.
 * - `/leagueCustomizations/{leagueId}`, `/teamCustomizations/{teamId}`, `/playerCustomizations/{playerId}`, `/matchCustomizations/{fixtureId}`, `/continentCustomizations/{continentId}`, `/countryCustomizations/{countryId}`: Custom names/statuses set by admins.
 * - `/pinnedIraqiMatches/{matchId}`: Pinned Iraqi matches, managed by admins.
 *
 * @Key Security Decisions:
 * - User data is strictly private; no listing of `/users` is allowed.
 * - Public data (competitions, teams, matches, news) is readable by all, but writable only by admins.
 * - Admin management is restricted to existing admins.
 * - Default security posture is strict; any ambiguous relationship defaults to owner-only access or admin-only access, depending on the collection.
 *
 * @Denormalization for Authorization:
 * Admin status is determined by the existence of a document in the `/admins/{adminId}` collection, avoiding the need to fetch admin roles from user profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (read, write) User with matching userId.
     * @deny (read, write) Any other user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the document exists and the user owns it
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to competition data.
     * @path /competitions/{competitionId}
     * @allow (read) Publicly readable.
     * @allow (write) Only admins can create, update, or delete.
     * @deny (write) Non-admins.
     * @principle Restricts write access to admins.
     */
    match /competitions/{competitionId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to team data.
     * @path /teams/{teamId}
     * @allow (read) Publicly readable.
     * @allow (write) Only admins can create, update, or delete.
     * @deny (write) Non-admins.
     * @principle Restricts write access to admins.
     */
    match /teams/{teamId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to match data.
     * @path /matches/{matchId}
     * @allow (read) Publicly readable.
     * @deny (write) No one can create, update, or delete.
     * @principle Data is read-only.
     */
    match /matches/{matchId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Controls access to news article data.
     * @path /news/{newsId}
     * @allow (read) Publicly readable.
     * @allow (write) Only admins can create, update, or delete.
     * @deny (write) Non-admins.
     * @principle Restricts write access to admins.
     */
    match /news/{newsId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to admin user data.
     * @path /admins/{adminId}
     * @allow (create, update, delete) Only existing admins can create, update, or delete other admins.
     * @deny (read) Normal users can't read.
     * @principle Restricts access to admin management to existing admins.
     */
    match /admins/{adminId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
            return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if false;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to user's favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (read, write) User with matching userId.
     * @deny (read, write) Any other user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favorites {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the document exists and the user owns it
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to top competition data.
     * @path /topCompetitions/{competitionId}
     * @allow (read) Publicly readable.
     * @allow (write) Only admins can create, update, or delete.
     * @deny (write) Non-admins.
     * @principle Restricts write access to admins.
     */
    match /topCompetitions/{competitionId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to top team data.
     * @path /topTeams/{teamId}
     * @allow (read) Publicly readable.
     * @allow (write) Only admins can create, update, or delete.
     * @deny (write) Non-admins.
     * @principle Restricts write access to admins.
     */
    match /topTeams/{teamId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

      /**
       * @description Controls access to league customizations.
       * @path /leagueCustomizations/{leagueId}
       * @allow (read) Publicly readable.
       * @allow (write) Only admins can create, update, or delete.
       * @deny (write) Non-admins.
       * @principle Restricts write access to admins.
       */
      match /leagueCustomizations/{leagueId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
          return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
      }

      /**
       * @description Controls access to team customizations.
       * @path /teamCustomizations/{teamId}
       * @allow (read) Publicly readable.
       * @allow (write) Only admins can create, update, or delete.
       * @deny (write) Non-admins.
       * @principle Restricts write access to admins.
       */
      match /teamCustomizations/{teamId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
          return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
      }

      /**
       * @description Controls access to player customizations.
       * @path /playerCustomizations/{playerId}
       * @allow (read) Publicly readable.
       * @allow (write) Only admins can create, update, or delete.
       * @deny (write) Non-admins.
       * @principle Restricts write access to admins.
       */
      match /playerCustomizations/{playerId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
          return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
      }

      /**
       * @description Controls access to match customizations.
       * @path /matchCustomizations/{fixtureId}
       * @allow (read) Publicly readable.
       * @allow (write) Only admins can create, update, or delete.
       * @deny (write) Non-admins.
       * @principle Restricts write access to admins.
       */
      match /matchCustomizations/{fixtureId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
          return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
      }

      /**
       * @description Controls access to continent customizations.
       * @path /continentCustomizations/{continentId}
       * @allow (read) Publicly readable.
       * @allow (write) Only admins can create, update, or delete.
       * @deny (write) Non-admins.
       * @principle Restricts write access to admins.
       */
      match /continentCustomizations/{continentId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
          return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
      }

      /**
       * @description Controls access to country customizations.
       * @path /countryCustomizations/{countryId}
       * @allow (read) Publicly readable.
       * @allow (write) Only admins can create, update, or delete.
       * @deny (write) Non-admins.
       * @principle Restricts write access to admins.
       */
      match /countryCustomizations/{countryId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
          return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
      }

      /**
       * @description Controls access to pinned Iraqi matches.
       * @path /pinnedIraqiMatches/{matchId}
       * @allow (read) Publicly readable.
       * @allow (write) Only admins can create, update, or delete.
       * @deny (write) Non-admins.
       * @principle Restricts write access to admins.
       */
      match /pinnedIraqiMatches/{matchId} {
        // Helper function to check if the user is an admin based on document existence.
        function isAdmin() {
          return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get, list: if true;
        allow create, update, delete: if isAdmin();
      }

  }
}