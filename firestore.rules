/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-based ownership and public read access where appropriate.
 * Users can only read and write their own data, while some collections (e.g., competitions, teams, matches, news, predictions)
 * are publicly readable but only writable by admins or backend processes.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /competitions/{competitionId}, /teams/{teamId}, /matches/{matchId}, /news/{newsId}: Publicly readable collections containing application data.
 * - /admins/{adminId}: Stores admin user data.
 * - /users/{userId}/favorites/data: Stores user's favorite teams and competitions.
 * - /predictions/{fixtureId}: Stores matches that admins have pinned for user predictions.
 * - /predictions/{fixtureId}/userPredictions/{userId}: Stores individual user predictions for a specific match.
 * - /leaderboard/{userId}: Stores the aggregated prediction scores for each user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user documents.
 * - Competitions, teams, matches, and news are publicly readable. Write access to these collections is restricted (TODO: Implement admin-only writes).
 * - The /admins collection is only writable by backend processes.
 * - User favorites are private and only accessible by the user.
 * - The /predictions collection is publicly readable, allowing any user to see which matches are available for prediction.
 * - User predictions are private and only accessible by the user.
 * - The /leaderboard collection is publicly readable. Write access to this collection is restricted (TODO: Implement backend-only writes).
 *
 * Denormalization for Authorization:
 * - Currently, no explicit denormalization is used. If admin-only writes are implemented for collections like 'news', consider adding an 'adminId' field to the document
 *   and validating it in the rules to avoid extra `get()` calls.
 *
 * Structural Segregation:
 * - The application uses separate collections for public data (e.g., /news) and private user data (e.g., /users/{userId}), which is a good practice.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to competition data.
     * @path /competitions/{competitionId}
     * @allow (get) Any user can read competition data.
     * @allow (list) Any user can list competitions.
     * @deny (create) No user can create a competition (admin-only).
     * @deny (update) No user can update a competition (admin-only).
     * @deny (delete) No user can delete a competition (admin-only).
     * @principle Publicly readable, write access restricted to admins (TODO).
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only write validation
    }

    /**
     * @description Controls access to team data.
     * @path /teams/{teamId}
     * @allow (get) Any user can read team data.
     * @allow (list) Any user can list teams.
     * @deny (create) No user can create a team (admin-only).
     * @deny (update) No user can update a team (admin-only).
     * @deny (delete) No user can delete a team (admin-only).
     * @principle Publicly readable, write access restricted to admins (TODO).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only write validation
    }

    /**
     * @description Controls access to match data.
     * @path /matches/{matchId}
     * @allow (get) Any user can read match data.
     * @allow (list) Any user can list matches.
     * @deny (create) No user can create a match (admin-only).
     * @deny (update) No user can update a match (admin-only).
     * @deny (delete) No user can delete a match (admin-only).
     * @principle Publicly readable, write access restricted to admins (TODO).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only write validation
    }

    /**
     * @description Controls access to news articles.
     * @path /news/{newsId}
     * @allow (get) Any user can read news articles.
     * @allow (list) Any user can list news articles.
     * @deny (create) No user can create a news article (admin-only).
     * @deny (update) No user can update a news article (admin-only).
     * @deny (delete) No user can delete a news article (admin-only).
     * @principle Publicly readable, write access restricted to admins (TODO).
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only write validation
    }

    /**
     * @description Controls access to admin user data.
     * @path /admins/{adminId}
     * @deny (get) No user can read admin data.
     * @deny (list) No user can list admins.
     * @deny (create) No user can create an admin.
     * @deny (update) No user can update an admin.
     * @deny (delete) No user can delete an admin.
     * @principle Write access restricted to backend (TODO).
     */
    match /admins/{adminId} {
      allow get, list, create, update, delete: if false; // TODO: Add backend-only write validation
    }

    /**
     * @description Controls access to user's favorite teams and competitions.
     * @path /users/{userId}/favorites/data
     * @allow (create) User with ID 'user123' can create their own favorites data.
     * @allow (get) User with ID 'user123' can read their own favorites data.
     * @allow (update) User with ID 'user123' can update their own favorites data.
     * @allow (delete) User with ID 'user123' can delete their own favorites data.
     * @deny (create) User with ID 'user456' cannot create favorites data for 'user123'.
     * @deny (get) User with ID 'user456' cannot read favorites data of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favorites/data {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

      /**
       * @description Controls access to matches pinned for predictions.
       * @path /predictions/{fixtureId}
       * @allow (get) Any user can read prediction match data.
       * @allow (list) Any user can list prediction matches.
       * @deny (create) No user can create a prediction match (admin-only).
       * @deny (update) No user can update a prediction match (admin-only).
       * @deny (delete) No user can delete a prediction match (admin-only).
       * @principle Publicly readable, write access restricted to admins (TODO).
       */
    match /predictions/{fixtureId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin-only write validation
    }

    /**
     * @description Controls access to individual user predictions for a specific match.
     * @path /predictions/{fixtureId}/userPredictions/{userId}
     * @allow (create) User with ID 'user123' can create their own prediction.
     * @allow (get) User with ID 'user123' can read their own prediction.
     * @allow (update) User with ID 'user123' can update their own prediction.
     * @allow (delete) User with ID 'user123' can delete their own prediction.
     * @deny (create) User with ID 'user456' cannot create a prediction for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the prediction of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /predictions/{fixtureId}/userPredictions/{userId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

      /**
       * @description Controls access to the aggregated prediction scores for each user.
       * @path /leaderboard/{userId}
       * @allow (get) Any user can read leaderboard data.
       * @allow (list) Any user can list leaderboard data.
       * @deny (create) No user can create leaderboard data (backend-only).
       * @deny (update) No user can update leaderboard data (backend-only).
       * @deny (delete) No user can delete leaderboard data (backend-only).
       * @principle Publicly readable, write access restricted to backend (TODO).
       */
    match /leaderboard/{userId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add backend-only write validation
    }
  }
}