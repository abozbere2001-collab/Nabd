/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-based access control.
 * Users can only read and write their own data, while administrators have broader permissions
 * to manage shared entities and content.  Read access to shared data (competitions, teams, matches, news) is generally public.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information; access is restricted to the user.
 * - /competitions/{competitionId}: Stores competition data; publicly readable, admin-managed.
 * - /teams/{teamId}: Stores team data; publicly readable, admin-managed.
 * - /matches/{matchId}: Stores match data; publicly readable.
 * - /news/{newsId}: Stores news articles; publicly readable, admin-managed.
 * - /admins/{adminId}: Stores admin user data; only admins can manage other admins.
 * - /users/{userId}/favorites: Stores user's favorite teams and competitions; access restricted to the user.
 * - /topCompetitions/{competitionId}: Stores top competitions marked by admins; publicly readable, admin-managed.
 * - /topTeams/{teamId}: Stores top teams marked by admins; publicly readable, admin-managed.
 * - /leagueCustomizations/{leagueId}: Stores custom names for leagues set by admins; admin-managed.
 * - /teamCustomizations/{teamId}: Stores custom names for teams set by admins; admin-managed.
 * - /playerCustomizations/{playerId}: Stores custom names for players set by admins; admin-managed.
 * - /continentCustomizations/{continentId}: Stores custom names for continents set by admins; admin-managed.
 * - /countryCustomizations/{countryId}: Stores custom names for countries set by admins; admin-managed.
 * - /pinnedIraqiMatches/{matchId}: Stores the details of a pinned Iraqi match, managed by an admin.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Read access is generally public for shared data (competitions, teams, matches, news) to simplify the app's data fetching requirements.
 * - Write access to shared data is restricted to admins.
 * - Admin status is determined by the presence of a document in the `/admins/{adminId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is an existing owner of the document.
      * @param {string} userId The user ID to compare against.
      * @return {boolean} True if the user is the owner and the document exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     *    - auth.uid: 'user123'
     *    - request.resource.data: { id: 'user123', ... }
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     *    - auth.uid: 'user123'
     *    - request.resource.data: { id: 'user456', ... }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /competitions/{competitionId} documents.
     * @path /competitions/{competitionId}
     * @allow (get, list) Any user can read competition data.
     * @allow (create) Admin user creates a new competition.
     *    - isAdmin(): true
     * @deny (update, delete) Non-admin user tries to update or delete a competition.
     *    - isAdmin(): false
     * @principle Public read, admin-only writes.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /teams/{teamId} documents.
     * @path /teams/{teamId}
     * @allow (get, list) Any user can read team data.
     * @allow (create) Admin user creates a new team.
     *    - isAdmin(): true
     * @deny (update, delete) Non-admin user tries to update or delete a team.
     *    - isAdmin(): false
     * @principle Public read, admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /matches/{matchId} documents.
     * @path /matches/{matchId}
     * @allow (get, list) Any user can read match data.
     * @principle Public read.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for /news/{newsId} documents.
     * @path /news/{newsId}
     * @allow (get, list) Any user can read news articles.
     * @allow (create) Admin user creates a new news article.
     *    - isAdmin(): true
     * @deny (update, delete) Non-admin user tries to update or delete a news article.
     *    - isAdmin(): false
     * @principle Public read, admin-only writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /admins/{adminId} documents.
     * @path /admins/{adminId}
     * @allow (create) Admin user creates a new admin.
     *    - isAdmin(): true
     * @deny (get, list) Non-admin user or anonymous user tries to get or list admin data.
     *    - isSignedIn(): false or isAdmin(): false
     * @deny (update, delete) Non-admin user tries to update or delete an admin.
     *    - isAdmin(): false
     * @principle Admin-only access.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /users/{userId}/favorites documents.
     * @path /users/{userId}/favorites
     * @allow (get, create, update, delete) User with ID 'user123' manages their own favorites.
     *    - auth.uid: 'user123'
     * @deny (get, create, update, delete) User with ID 'user123' tries to manage favorites for 'user456'.
     *    - auth.uid: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/favorites {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /topCompetitions/{competitionId} documents.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) Any user can read top competition data.
     * @allow (create) Admin user creates a new top competition.
     *    - isAdmin(): true
     * @deny (update, delete) Non-admin user tries to update or delete a top competition.
     *    - isAdmin(): false
     * @principle Public read, admin-only writes.
     */
    match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /topTeams/{teamId} documents.
     * @path /topTeams/{teamId}
     * @allow (get, list) Any user can read top team data.
     * @allow (create) Admin user creates a new top team.
     *    - isAdmin(): true
     * @deny (update, delete) Non-admin user tries to update or delete a top team.
     *    - isAdmin(): false
     * @principle Public read, admin-only writes.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Rules for /leagueCustomizations/{leagueId} documents.
      * @path /leagueCustomizations/{leagueId}
      */
    match /leagueCustomizations/{leagueId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /teamCustomizations/{teamId} documents.
     * @path /teamCustomizations/{teamId}
     */
    match /teamCustomizations/{teamId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /playerCustomizations/{playerId} documents.
     * @path /playerCustomizations/{playerId}
     */
    match /playerCustomizations/{playerId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /continentCustomizations/{continentId} documents.
     * @path /continentCustomizations/{continentId}
     */
    match /continentCustomizations/{continentId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /countryCustomizations/{countryId} documents.
     * @path /countryCustomizations/{countryId}
     */
    match /countryCustomizations/{countryId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /pinnedIraqiMatches/{matchId} documents.
     * @path /pinnedIraqiMatches/{matchId}
     */
    match /pinnedIraqiMatches/{matchId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}