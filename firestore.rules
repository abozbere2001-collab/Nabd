rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Secures user profile data. Only the user can read/write their own profile.
     * @path: /users/{userId}
     * @allow: User (create) - Authenticated user 'user_abc' can create their own profile at /users/user_abc.
     * @allow: User (get, update, delete) - Authenticated user 'user_abc' can read/write their own profile at /users/user_abc.
     * @deny: User (create, get, update, delete) - Authenticated user 'user_xyz' cannot read/write profile data at /users/user_abc.
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner();
      allow list: if false;
      allow create: if isOwner();
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description: Secures competition data. Publicly readable, but only admins can create/update/delete.
     * @path: /competitions/{competitionId}
     * @allow: (get, list) - Any user can read competition data.
     * @allow: Admin (create, update, delete) - An admin user can create/update/delete competition data.
     * @deny: Non-Admin (create, update, delete) - A non-admin user cannot create/update/delete competition data.
     * @principle: Restricts write access to authorized admins.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description: Secures team data. Publicly readable, but only admins can create/update/delete.
     * @path: /teams/{teamId}
     * @allow: (get, list) - Any user can read team data.
     * @allow: Admin (create, update, delete) - An admin user can create/update/delete team data.
     * @deny: Non-Admin (create, update, delete) - A non-admin user cannot create/update/delete team data.
     * @principle: Restricts write access to authorized admins.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description: Secures match data. Publicly readable.
     * @path: /matches/{matchId}
     * @allow: (get, list) - Any user can read match data.
     * @deny: (create, update, delete) - No user can create/update/delete match data through direct client access.
     * @principle: Allows public read access but prevents unauthorized modifications.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description: Secures news articles. Publicly readable, but only admins can create/update/delete.
     * @path: /news/{newsId}
     * @allow: (get, list) - Any user can read news articles.
     * @allow: Admin (create, update, delete) - An admin user can create/update/delete news articles.
     * @deny: Non-Admin (create, update, delete) - A non-admin user cannot create/update/delete news articles.
     * @principle: Restricts write access to authorized admins.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description: Secures admin user data. Only admins can create/update/delete other admins. Normal users can't read.
     * @path: /admins/{adminId}
     * @allow: Admin (create, update, delete) - An admin user can create/update/delete other admin user data.
     * @deny: Non-Admin (get, list, create, update, delete) - A non-admin user cannot read/write admin user data.
     * @principle: Restricts all access to admins only.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description: Secures user's favorite teams and competitions. Only the user can read/write their own favorites.
     * @path: /users/{userId}/favorites
     * @allow: User (get, create, update, delete, list) - Authenticated user 'user_abc' can read/write their own favorites at /users/user_abc/favorites.
     * @deny: User (get, create, update, delete, list) - Authenticated user 'user_xyz' cannot read/write profile data at /users/user_abc/favorites.
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId}/favorites/{favoriteId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner();
      allow list: if isOwner();
      allow create: if isOwner();
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    // Helper function to determine if a user is an admin.
    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Helper function to determine if a user is signed in
    function isSignedIn() {
        return request.auth != null;
    }
  }
}