/**
 * @file Firebase Security Rules for Goal Stack application.
 *
 * @corePhilosophy
 * This ruleset enforces a hybrid security model:
 * - User-owned data: Each user has full control over their own data (e.g., profile, favorites).
 * - Publicly readable data: Certain collections (e.g., competitions, teams, matches, news) are publicly readable.
 * - Admin-managed data: Only administrator users can create, update, or delete certain collections (e.g., competitions, teams, news, admins, pinned Iraqi match).
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /competitions/{competitionId}: Stores competition data. Publicly readable, but only admins can create/update/delete.
 * - /teams/{teamId}: Stores team data. Publicly readable, but only admins can create/update/delete.
 * - /matches/{matchId}: Stores match data. Publicly readable.
 * - /news/{newsId}: Stores news articles. Publicly readable, but only admins can create/update/delete.
 * - /admins/{adminId}: Stores admin user data. The existence of a document indicates admin status. Only admins can create/update/delete other admins. Normal users can't read.
 * - /users/{userId}/favorites: Stores user's favorite teams and competitions. Only the user can read/write their own favorites.
 * - /topCompetitions/{competitionId}: Stores top competitions marked by admins. Publicly readable, but only admins can create/update/delete.
 * - /topTeams/{teamId}: Stores top teams marked by admins. Publicly readable, but only admins can create/update/delete.
 * - /leagueCustomizations/{leagueId}: Stores custom names for leagues set by admins.
 * - /teamCustomizations/{teamId}: Stores custom names for teams set by admins.
 * - /playerCustomizations/{playerId}: Stores custom names for players set by admins.
 * - /continentCustomizations/{continentId}: Stores custom names for continents set by admins.
 * - /countryCustomizations/{countryId}: Stores custom names for countries set by admins.
 * - /pinnedIraqiMatch/special: Stores the details of a single pinned Iraqi match, managed by an admin.
 *
 * @keySecurityDecisions
 * - User listing is disallowed to protect user privacy.
 * - Admin status is determined by the presence of a document in `/admins/{adminId}`.
 * - The rules are designed to be Authorization Independent, minimizing the need for complex data filtering or multi-document reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read/write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with ID 'user123' can read their profile if request.auth.uid == 'user123'.
     * @allow (update) User with ID 'user123' can update their profile if request.auth.uid == 'user123'.
     * @allow (delete) User with ID 'user123' can delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user123' cannot create a profile with ID 'user456'.
     * @deny (get) User with ID 'user123' cannot read the profile of user 'user456'.
     * @deny (update) User with ID 'user123' cannot update the profile of user 'user456'.
     * @deny (delete) User with ID 'user123' cannot delete the profile of user 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to competitions, but restricts create/update/delete to admins.
     * @path /competitions/{competitionId}
     * @allow (get) Any user can read a competition.
     * @allow (list) Any user can list competitions.
     * @allow (create) An admin can create a competition.
     * @deny (create) A non-admin user cannot create a competition.
     * @deny (update) A non-admin user cannot update a competition.
     * @deny (delete) A non-admin user cannot delete a competition.
     * @principle Allows public read with owner-only writes, with admin replacing the concept of owner.
     */
    match /competitions/{competitionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to teams, but restricts create/update/delete to admins.
     * @path /teams/{teamId}
     * @allow (get) Any user can read a team.
     * @allow (list) Any user can list teams.
     * @allow (create) An admin can create a team.
     * @deny (create) A non-admin user cannot create a team.
     * @deny (update) A non-admin user cannot update a team.
     * @deny (delete) A non-admin user cannot delete a team.
     * @principle Allows public read with owner-only writes, with admin replacing the concept of owner.
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to matches.
     * @path /matches/{matchId}
     * @allow (get) Any user can read a match.
     * @allow (list) Any user can list matches.
     * @deny (create) No one can create a match directly through the client (likely created via a backend process).
     * @deny (update) No one can update a match directly through the client.
     * @deny (delete) No one can delete a match directly through the client.
     * @principle Allows public read-only access.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to news articles, but restricts create/update/delete to admins.
     * @path /news/{newsId}
     * @allow (get) Any user can read a news article.
     * @allow (list) Any user can list news articles.
     * @allow (create) An admin can create a news article.
     * @deny (create) A non-admin user cannot create a news article.
     * @deny (update) A non-admin user cannot update a news article.
     * @deny (delete) A non-admin user cannot delete a news article.
     * @principle Allows public read with owner-only writes, with admin replacing the concept of owner.
     */
    match /news/{newsId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts access to admin documents. Only admins can create/update/delete other admins.
     * @path /admins/{adminId}
     * @allow (create) An admin can create another admin.
     * @allow (update) An admin can update another admin.
     * @allow (delete) An admin can delete another admin.
     * @deny (get) Non admins cannot read admin info.
     * @deny (list) Non admins cannot list admin info.
     * @deny (create) A non-admin user cannot create an admin.
     * @deny (update) A non-admin user cannot update an admin.
     * @deny (delete) A non-admin user cannot delete an admin.
     * @principle Enforces role-based access control for admin management.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows a user to read/write their own favorite teams and competitions.
     * @path /users/{userId}/favorites
     * @allow (create) User with ID 'user123' can create their favorites document if request.auth.uid == 'user123'.
     * @allow (get) User with ID 'user123' can read their favorites if request.auth.uid == 'user123'.
     * @allow (update) User with ID 'user123' can update their favorites if request.auth.uid == 'user123'.
     * @allow (delete) User with ID 'user123' can delete their favorites if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user123' cannot create favorites for user 'user456'.
     * @deny (get) User with ID 'user123' cannot read the favorites of user 'user456'.
     * @deny (update) User with ID 'user123' cannot update the favorites of user 'user456'.
     * @deny (delete) User with ID 'user123' cannot delete the favorites of user 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/favorites {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
	
	 /**
     * @description Allows public read access to top competitions, but restricts create/update/delete to admins.
     * @path /topCompetitions/{competitionId}
     * @allow (get) Any user can read a top competition.
     * @allow (list) Any user can list top competitions.
     * @allow (create) An admin can create a top competition.
     * @deny (create) A non-admin user cannot create a top competition.
     * @deny (update) A non-admin user cannot update a top competition.
     * @deny (delete) A non-admin user cannot delete a top competition.
     * @principle Allows public read with owner-only writes, with admin replacing the concept of owner.
     */
    match /topCompetitions/{competitionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to top teams, but restricts create/update/delete to admins.
     * @path /topTeams/{teamId}
     * @allow (get) Any user can read a top team.
     * @allow (list) Any user can list top teams.
     * @allow (create) An admin can create a top team.
     * @deny (create) A non-admin user cannot create a top team.
     * @deny (update) A non-admin user cannot update a top team.
     * @deny (delete) A non-admin user cannot delete a top team.
     * @principle Allows public read with owner-only writes, with admin replacing the concept of owner.
     */
    match /topTeams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    
    /**
     * @description Allows admins to manage custom names for leagues.
     * @path /leagueCustomizations/{leagueId}
     * @allow (create) An admin can create a custom name for a league.
     * @allow (update) An admin can update a custom name for a league.
     * @allow (delete) An admin can delete a custom name for a league.
     * @deny (get) A non admin cannot get a custom name for a league.
     * @deny (list) A non admin cannot list custom names for a league.
     * @deny (create) A non-admin user cannot create a custom name for a league.
     * @deny (update) A non-admin user cannot update a custom name for a league.
     * @deny (delete) A non-admin user cannot delete a custom name for a league.
     */
    match /leagueCustomizations/{leagueId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage custom names for teams.
     * @path /teamCustomizations/{teamId}
     * @allow (create) An admin can create a custom name for a team.
     * @allow (update) An admin can update a custom name for a team.
     * @allow (delete) An admin can delete a custom name for a team.
     * @deny (get) A non admin cannot get a custom name for a team.
     * @deny (list) A non admin cannot list custom names for a team.
     * @deny (create) A non-admin user cannot create a custom name for a team.
     * @deny (update) A non-admin user cannot update a custom name for a team.
     * @deny (delete) A non-admin user cannot delete a custom name for a team.
     */
    match /teamCustomizations/{teamId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage custom names for players.
     * @path /playerCustomizations/{playerId}
     * @allow (create) An admin can create a custom name for a player.
     * @allow (update) An admin can update a custom name for a player.
     * @allow (delete) An admin can delete a custom name for a player.
     * @deny (get) A non admin cannot get a custom name for a player.
     * @deny (list) A non admin cannot list custom names for a player.
     * @deny (create) A non-admin user cannot create a custom name for a player.
     * @deny (update) A non-admin user cannot update a custom name for a player.
     * @deny (delete) A non-admin user cannot delete a custom name for a player.
     */
    match /playerCustomizations/{playerId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage custom names for continents.
     * @path /continentCustomizations/{continentId}
     * @allow (create) An admin can create a custom name for a continent.
     * @allow (update) An admin can update a custom name for a continent.
     * @allow (delete) An admin can delete a custom name for a continent.
     * @deny (get) A non admin cannot get a custom name for a continent.
     * @deny (list) A non admin cannot list custom names for a continent.
     * @deny (create) A non-admin user cannot create a custom name for a continent.
     * @deny (update) A non-admin user cannot update a custom name for a continent.
     * @deny (delete) A non-admin user cannot delete a custom name for a continent.
     */
    match /continentCustomizations/{continentId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage custom names for countries.
     * @path /countryCustomizations/{countryId}
     * @allow (create) An admin can create a custom name for a country.
     * @allow (update) An admin can update a custom name for a country.
     * @allow (delete) An admin can delete a custom name for a country.
     * @deny (get) A non admin cannot get a custom name for a country.
     * @deny (list) A non admin cannot list custom names for a country.
     * @deny (create) A non-admin user cannot create a custom name for a country.
     * @deny (update) A non-admin user cannot update a custom name for a country.
     * @deny (delete) A non-admin user cannot delete a custom name for a country.
     */
    match /countryCustomizations/{countryId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage the pinned Iraqi match.
     * @path /pinnedIraqiMatch/special
     * @allow (create) An admin can create the pinned Iraqi match.
     * @allow (update) An admin can update the pinned Iraqi match.
     * @allow (delete) An admin can delete the pinned Iraqi match.
     * @allow (get) All users can get the pinned Iraqi match.
     * @allow (list) All users can list the pinned Iraqi match.
     * @deny (create) A non-admin user cannot create the pinned Iraqi match.
     * @deny (update) A non-admin user cannot update the pinned Iraqi match.
     * @deny (delete) A non-admin user cannot delete the pinned Iraqi match.
     */
    match /pinnedIraqiMatch/special {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}