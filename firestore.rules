/**
 * @fileoverview Firestore Security Rules for the Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and favorites,
 * and restricts write access to admin users for competitions, teams, and news.
 * Read access is generally public for non-sensitive data like competitions, teams, and matches.
 * Admin status is determined by the existence of a document in `/admins/{adminId}`.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information, accessible only to the user.
 * - `/competitions/{competitionId}`: Stores competition data, publicly readable, admin-writeable.
 * - `/teams/{teamId}`: Stores team data, publicly readable, admin-writeable.
 * - `/matches/{matchId}`: Stores match data, publicly readable.
 * - `/news/{newsId}`: Stores news articles, publicly readable, admin-writeable.
 * - `/admins/{adminId}`: Stores admin user data, only accessible to admins. The existence of a document here confers admin status.
 * - `/users/{userId}/favorites/{favoriteId}`: Stores user's favorite teams and competitions, accessible only to the user.
 * - `/topCompetitions/{competitionId}`: Stores top competitions, publicly readable, admin-writeable.
 * - `/topTeams/{teamId}`: Stores top teams, publicly readable, admin-writeable.
 * - `/leagueCustomizations/{leagueId}`: Stores custom league names, admin-writeable.
 * - `/teamCustomizations/{teamId}`: Stores custom team names, admin-writeable.
 * - `/playerCustomizations/{playerId}`: Stores custom player names, admin-writeable.
 * - `/continentCustomizations/{continentId}`: Stores custom continent names, admin-writeable.
 * - `/countryCustomizations/{countryId}`: Stores custom country names, admin-writeable.
 * - `/pinnedIraqiMatch/special`: Stores data for a pinned match, admin-writeable.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Admin status is determined by document existence in `/admins/{adminId}`.
 * - Public read access is granted to competitions, teams, and matches.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (read, write) if the user is signed in and the requested userId matches their auth UID.
     * @deny (read, write) if the user is not signed in or the userId does not match.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to competition data, but restricts write access to admins.
     * @path /competitions/{competitionId}
     * @allow (read) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     * @principle Grants public read access with admin-only writes.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to team data, but restricts write access to admins.
     * @path /teams/{teamId}
     * @allow (read) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     * @principle Grants public read access with admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to match data.
     * @path /matches/{matchId}
     * @allow (read) to all users.
     * @deny (write) to all users.
     * @principle Grants public read access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to news articles, but restricts write access to admins.
     * @path /news/{newsId}
     * @allow (read) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     * @principle Grants public read access with admin-only writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts access to admin user data. Only admins can create, update, or delete admin documents. Normal users can't read.
     * @path /admins/{adminId}
     * @allow (create, update, delete) only to other admin users.
     * @deny (read, write) to non-admin users.
     * @principle Restricts access to admin data to admin users only.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Enforces user-ownership for user favorites.
     * @path /users/{userId}/favorites/{favoriteId}
     * @allow (read, write) if the user is signed in and the requested userId matches their auth UID.
     * @deny (read, write) if the user is not signed in or the userId does not match.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/favorites/{favoriteId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

	/**
     * @description Allows public read access to top competition data, but restricts write access to admins.
     * @path /topCompetitions/{competitionId}
     * @allow (read) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     */
    match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to top team data, but restricts write access to admins.
     * @path /topTeams/{teamId}
     * @allow (read) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admin to customize league names.
     * @path /leagueCustomizations/{leagueId}
     * @allow (read) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     */
    match /leagueCustomizations/{leagueId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description Allows admin to customize team names.
     * @path /teamCustomizations/{teamId}
     * @allow (read) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     */
    match /teamCustomizations/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description Allows admin to customize player names.
     * @path /playerCustomizations/{playerId}
     * @allow (read) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     */
    match /playerCustomizations/{playerId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admin to customize continent names.
     * @path /continentCustomizations/{continentId}
     * @allow (read) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     */
    match /continentCustomizations/{continentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admin to customize country names.
     * @path /countryCustomizations/{countryId}
     * @allow (read) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     */
    match /countryCustomizations/{countryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admin to manage the pinned Iraqi match.
     * @path /pinnedIraqiMatch/special
     * @allow (read) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     */
    match /pinnedIraqiMatch/special {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
  }
}