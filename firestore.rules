/**
 * @fileoverview Firestore Security Rules for Goal Stack application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and restricts
 * administrative actions to designated admin users. Top-level collections
 * like 'matches', 'competitions', 'teams', and 'news' allow public read access
 * but restrict write access based on user roles or ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /matches/{matchId}: Stores match data. Publicly readable.
 * - /competitions/{competitionId}: Stores competition data. Publicly readable.
 * - /teams/{teamId}: Stores team data. Publicly readable.
 * - /news/{newsId}: Stores news articles. Publicly readable, admin-owned writes.
 * - /admins/{adminId}: Stores admin user data. Existence grants admin privileges.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - Public read access is granted for matches, competitions, teams, and news.
 * - Write access to news is restricted to authorized admins.
 * - Existence of document in `/admins/{adminId}` collection grants admin privileges.
 *
 * Denormalization for Authorization:
 * - The `favoriteTeamIds`, `favoriteCompetitionIds`, and `favoriteMatchIds` arrays
 *   within the `/users/{userId}` document denormalize user preferences, avoiding
 *   the need for `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces ownership for user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) - User with ID 'user123' reads/updates/deletes their profile.
     *   - request.auth.uid: 'user123'
     *   - resource.data.id: 'user123'
     * @deny (create) - User with ID 'user123' attempts to create a profile for 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (get, update, delete) - User with ID 'user123' attempts to read/update/delete the profile of 'user456'.
     *   - request.auth.uid: 'user123'
     *   - resource.data.id: 'user456'
     * @principle Enforces strict user-ownership for data access and modification.
     */
    match /users/{userId} {
      // Allow the user to read their own profile.
      allow get: if isOwner(userId);
      // Allow the user to list their own profile (disabled in this case).
      allow list: if false;

      // Allow the user to create their own profile, enforcing the ID to match.
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;

      // Allow the user to update their own profile, ensuring the ID remains consistent.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to match data. Writes are not permitted.
     * @path /matches/{matchId}
     * @allow (get, list) - Any user can read match data.
     * @deny (create, update, delete) - No user can create, update, or delete match data.
     * @principle Enables public data consumption while preventing unauthorized modifications.
     */
    match /matches/{matchId} {
      // Allow anyone to read match data.
      allow get, list: if true;

      // No one can create, update, or delete match data.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to competition data. Writes are not permitted.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Any user can read competition data.
     * @deny (create, update, delete) - No user can create, update, or delete competition data.
     * @principle Enables public data consumption while preventing unauthorized modifications.
     */
    match /competitions/{competitionId} {
      // Allow anyone to read competition data.
      allow get, list: if true;

      // No one can create, update, or delete competition data.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to team data. Writes are not permitted.
     * @path /teams/{teamId}
     * @allow (get, list) - Any user can read team data.
     * @deny (create, update, delete) - No user can create, update, or delete team data.
     * @principle Enables public data consumption while preventing unauthorized modifications.
     */
    match /teams/{teamId} {
      // Allow anyone to read team data.
      allow get, list: if true;

      // No one can create, update, or delete team data.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to news articles. Writes are restricted to admins.
     * @path /news/{newsId}
     * @allow (get, list) - Any user can read news articles.
     * @allow (create, update, delete) - Only admins can create, update, or delete news articles.
     * @principle Enables public data consumption with restricted administrative control.
     */
    match /news/{newsId} {
      // Allow anyone to read news articles.
      allow get, list: if true;

      // Only admins can create, update, or delete news articles.
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to admin user data. Only admins themselves can read their data. Creation is allowed to set initial permissions.
     * @path /admins/{adminId}
     * @allow (create) - Allow creation
     * @allow (get) - Only admin can get their data
     * @allow (list) - Nobody can list
     * @allow (update, delete) - No one can update or delete an admin profile.
     * @principle Limits access to admin data.
     */
    match /admins/{adminId} {
      allow create: if true;
      allow get: if isAdmin();
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper Functions ---

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is the owner of the document based on the userId.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Checks if the user is the owner of the existing document.
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    // Checks if the user is an admin (exists in the /admins collection).
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}