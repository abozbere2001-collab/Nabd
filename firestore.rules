/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset prioritizes secure authorization based on user identity and resource ownership. It allows public read access to some data while restricting write access to authorized users. Data structure validation is relaxed for rapid prototyping.
 * @data_structure
 *   - /users/{userId}: User profile information, owned by the user.
 *   - /competitions/{competitionId}: Public competition data.
 *   - /teams/{teamId}: Public team data.
 *   - /matches/{matchId}: Public match data.
 *   - /news/{newsId}: Public news articles, write access controlled by admin users.
 *   - /admins/{adminId}: Admin user data, only accessible to the admin user.
 *   - /users/{userId}/favorites/data: User's favorite teams and competitions, owned by the user.
 *   - /predictions/{fixtureId}: Publicly readable matches that admin pinned for predictions.
 *   - /predictions/{fixtureId}/userPredictions/{userId}: Individual user predictions for a specific match, owned by the user.
 *   - /leaderboard/{userId}: Aggregated prediction scores for each user.
 * @key_security_decisions
 *   - Public read access to competitions, teams, matches and predictions collections.
 *   - Owner-only access to user profiles and user-specific data.
 *   - Admin-only write access to news articles.
 *   - Leaderboard read and write access is open to signed in users for prototyping.
 * @denormalization_for_authorization None.
 * @structural_segregation Private user data is stored under the /users/{userId} collection for secure access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile information, owned by the user.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their profile.
     *   - request.auth.uid: 'user123'
     *   - resource.data.id: 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile with a different ID.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (update, delete) User with ID 'user123' cannot update or delete another user's profile.
     *   - request.auth.uid: 'user456'
     *   - resource.data.id: 'user123'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to competition data.
     * @path /competitions/{competitionId}
     * @allow (get, list) Any user, signed in or not, can read competition data.
     * @deny (create, update, delete) No one can create, update, or delete competition data through the client.
     * @principle Allows public read access to competitions, restricts write access.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to team data.
     * @path /teams/{teamId}
     * @allow (get, list) Any user, signed in or not, can read team data.
     * @deny (create, update, delete) No one can create, update, or delete team data through the client.
     * @principle Allows public read access to teams, restricts write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) Any user, signed in or not, can read match data.
     * @deny (create, update, delete) No one can create, update, or delete match data through the client.
     * @principle Allows public read access to matches, restricts write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to news articles, but restricts write access to admins.
     * @path /news/{newsId}
     * @allow (get, list) Any user, signed in or not, can read news articles.
     * @deny (create, update, delete) No one can create, update, or delete news articles through the client.
     * // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only write access
    }

    /**
     * @description Allows access to admin user data, only accessible to the admin user.
     * @path /admins/{adminId}
     * @allow (get, update, delete) Admin with ID 'admin123' can read, update, and delete their profile.
     *   - request.auth.uid: 'admin123'
     * @deny (create) No one can create admin profiles through the client.
     * @deny (get, update, delete) User with ID 'user123' cannot read, update, or delete the admin's profile.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /admins/{adminId} {
      allow get: if isSignedIn() && isOwner(adminId);
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn() && isOwner(adminId);
      allow delete: if isSignedIn() && isExistingOwner(adminId);
    }

    /**
     * @description Allows access to user's favorite teams and competitions, owned by the user.
     * @path /users/{userId}/favorites/data
     * @allow (create) User with ID 'user123' can create their favorites data.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their favorites data.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (create) User with ID 'user123' cannot create favorites data with a different userId.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user456'
     * @deny (update, delete) User with ID 'user123' cannot update or delete another user's favorites data.
     *   - request.auth.uid: 'user456'
     *   - resource.data.userId: 'user123'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/favorites/data {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to admin-pinned matches available for user predictions.
     * @path /predictions/{fixtureId}
     * @allow (get, list) Any user, signed in or not, can read the predictions data.
     * @deny (create, update, delete) No one can create, update, or delete predictions data through the client.
     * @principle Allows public read access to predictions, restricts write access.
     */
    match /predictions/{fixtureId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows access to individual user predictions for a specific match, owned by the user.
     * @path /predictions/{fixtureId}/userPredictions/{userId}
     * @allow (create) User with ID 'user123' can create their prediction.
     *   - request.auth.uid: 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their prediction.
     *   - request.auth.uid: 'user123'
     * @deny (update, delete) User with ID 'user123' cannot update or delete another user's prediction.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /predictions/{fixtureId}/userPredictions/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows read and write access to leaderboard scores for any signed-in user.
     * @path /leaderboard/{userId}
     * @allow (get, list, create, update, delete) Any signed-in user can read and write leaderboard data.
     * @principle Allows public read and write access for prototyping purposes.
     */
    match /leaderboard/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}