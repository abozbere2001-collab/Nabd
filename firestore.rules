rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the isSignedIn function, which returns true if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     * @example
     * isSignedIn() == true // If the user is signed in.
     * isSignedIn() == false // If the user is not signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the isOwner function, which checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the request is made by the owner, false otherwise.
     * @example
     * isOwner("someUserId") == true // If request.auth.uid == "someUserId"
     * isOwner("anotherUserId") == false // If request.auth.uid != "someUserId"
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines the isAdmin function, which checks if the user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     * @example
     * isAdmin() == true // If the user is an admin.
     * isAdmin() == false // If the user is not an admin.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Defines the isExistingOwner function, which checks if the user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the existing document's owner ID.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     * @example
     * isExistingOwner("someUserId") == true // If request.auth.uid == "someUserId" and the document exists.
     * isExistingOwner("anotherUserId") == false // If request.auth.uid != "someUserId" or the document does not exist.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) If the user is the owner.
     * @allow (create) If the user's ID matches the authenticated user's ID.
     * @allow (update) If the user is the owner.
     * @allow (delete) If the user is the owner.
     * @deny (get) If the user is not the owner.
     * @deny (create) If the user's ID does not match the authenticated user's ID.
     * @deny (update) If the user is not the owner.
     * @deny (delete) If the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /competitions/{competitionId} collection.
     * @path /competitions/{competitionId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /teams/{teamId} collection.
     * @path /teams/{teamId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /matches/{matchId} collection.
     * @path /matches/{matchId}
     * @allow (get, list) Publicly readable.
     * @deny (create, update, delete) All writes are denied.
     * @principle Public read access with no writes allowed.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /news/{newsId} collection.
     * @path /news/{newsId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /admins/{adminId} collection.
     * @path /admins/{adminId}
     * @allow (get) Denied for non admins
     * @allow (create, update, delete) Only admins can create, update, or delete other admins.
     * @deny (get) Normal users can't read.
     * @deny (create, update, delete) If not an admin.
     * @principle Restricts admin management to admins only.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/favorites/data document.
     * @path /users/{userId}/favorites/data
     * @allow (get) If the user is the owner.
     * @allow (create) If the user is the owner.
     * @allow (update) If the user is the owner.
     * @allow (delete) If the user is the owner.
     * @deny (get) If the user is not the owner.
     * @deny (create) If the user is not the owner.
     * @deny (update) If the user is not the owner.
     * @deny (delete) If the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/favorites/data {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    /**
     * @description Rules for the /topCompetitions/{competitionId} collection.
     * @path /topCompetitions/{competitionId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /topCompetitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /topTeams/{teamId} collection.
     * @path /topTeams/{teamId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /topTeams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

        /**
     * @description Rules for the /leagueCustomizations/{leagueId} collection.
     * @path /leagueCustomizations/{leagueId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /leagueCustomizations/{leagueId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /teamCustomizations/{teamId} collection.
     * @path /teamCustomizations/{teamId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /teamCustomizations/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /playerCustomizations/{playerId} collection.
     * @path /playerCustomizations/{playerId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /playerCustomizations/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

        /**
     * @description Rules for the /matchCustomizations/{fixtureId} collection.
     * @path /matchCustomizations/{fixtureId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /matchCustomizations/{fixtureId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /continentCustomizations/{continentId} collection.
     * @path /continentCustomizations/{continentId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /continentCustomizations/{continentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

        /**
     * @description Rules for the /countryCustomizations/{countryId} collection.
     * @path /countryCustomizations/{countryId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     * @principle Public read access with admin-only writes.
     */
    match /countryCustomizations/{countryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /pinnedIraqiMatches/{matchId} collection.
     * @path /pinnedIraqiMatches/{matchId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     */
    match /pinnedIraqiMatches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
       /**
     * @description Rules for the /leaguePredictions/{predictionId} collection.
     * @path /leaguePredictions/{predictionId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     */
    match /leaguePredictions/{predictionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /leagueLeaderboards/{leagueId}/users/{userId} collection.
     * @path /leagueLeaderboards/{leagueId}/users/{userId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only admins can create, update, or delete.
     * @deny (create, update, delete) If not an admin.
     */
    match /leagueLeaderboards/{leagueId}/users/{userId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}