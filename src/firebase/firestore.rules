/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and favorites.
 *  It also allows public read access to admin-curated content. Write rules are restricted to authenticated users.
 *
 * @dataStructure
 * - /users/{userId}: Stores public profile information for each user.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for a specific user.
 * - /favorites/{userId}: Stores user's favorite leagues, teams and players.
 * - /adminFavorites/{teamId}: Stores admin-favorited teams. Publicly readable, admin-writeable (not implemented in this version).
 * - /{entity}Customizations/{entityId}: Stores user-defined names.
 * - /matches/{matchId}: Stores metadata for a specific match.
 * - /matches/{matchId}/comments/{commentId}: Stores comments and replies for a specific match.
 *
 * @keySecurityDecisions
 * - Users can only read and write their own profile and favorite data.
 * - Listing of all users is disallowed.
 * - Admin-curated content (adminFavorites) is publicly readable but write access is not defined in this prototype.
 * - Customization documents are user-specific.
 *
 * @denormalizationForAuthorization
 * - User ownership is verified by matching the `userId` in the path to `request.auth.uid`.
 * - Notifications are stored under the user's document, so the user can only access their own notifications.
 *
 * @structuralSegregation
 * - Public user profiles are stored directly under `/users/{userId}`, separate from any private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own profile.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @deny (get, update, delete) Authenticated user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      
      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user notification documents.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) Authenticated user can create notifications under their own profile.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own notifications.
     * @deny (create) Authenticated user cannot create notifications for another user.
     * @deny (get, update, delete) Authenticated user cannot read, update, or delete another user's notifications.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.recipientId == userId;
      allow update: if isExistingOwner(userId) && resource.data.recipientId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.recipientId == userId;
    }

    /**
     * @description Controls access to user favorites document.
     * @path /favorites/{userId}
     * @allow (create) Authenticated user can create their own favorites.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own favorites.
     * @deny (create) Authenticated user cannot create favorites for another user.
     * @deny (get, update, delete) Authenticated user cannot read, update, or delete another user's favorites.
     * @principle Enforces document ownership for writes.
     */
    match /favorites/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to admin-favorited teams.
     * @path /adminFavorites/{teamId}
     * @allow (get, list) Public read access.
     * @deny (create, update, delete) Only admins can modify (not implemented in this version).
     * @principle Public read access with restricted writes.
     */
    match /adminFavorites/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check for writes.
    }

    /**
     * @description Controls access to league customizations.
     * @path /leagueCustomizations/{leagueId}
     * @allow (create) Authenticated user can create their own league customization.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own league customization.
     * @deny (create) Authenticated user cannot create league customizations for another user.
     * @deny (get, update, delete) Authenticated user cannot read, update, or delete another user's league customizations.
     * @principle Enforces document ownership for writes.
     */
    match /leagueCustomizations/{leagueId} {
       function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to country customizations.
     * @path /countryCustomizations/{countryName}
     * @allow (create) Authenticated user can create their own country customization.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own country customization.
     * @deny (create) Authenticated user cannot create country customizations for another user.
     * @deny (get, update, delete) Authenticated user cannot read, update, or delete another user's country customizations.
     */
    match /countryCustomizations/{countryName} {
       function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to continent customizations.
     * @path /continentCustomizations/{continentName}
     * @allow (create) Authenticated user can create their own continent customization.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own continent customization.
     * @deny (create) Authenticated user cannot create continent customizations for another user.
     * @deny (get, update, delete) Authenticated user cannot read, update, or delete another user's continent customizations.
     */
    match /continentCustomizations/{continentName} {
       function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to team customizations.
     * @path /teamCustomizations/{teamId}
     * @allow (create) Authenticated user can create their own team customization.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own team customization.
     * @deny (create) Authenticated user cannot create team customizations for another user.
     * @deny (get, update, delete) Authenticated user cannot read, update, or delete another user's team customizations.
     */
    match /teamCustomizations/{teamId} {
       function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to player customizations.
     * @path /playerCustomizations/{playerId}
     * @allow (create) Authenticated user can create their own player customization.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own player customization.
     * @deny (create) Authenticated user cannot create player customizations for another user.
     * @deny (get, update, delete) Authenticated user cannot read, update, or delete another user's player customizations.
     */
    match /playerCustomizations/{playerId} {
       function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to coach customizations.
     * @path /coachCustomizations/{coachId}
     * @allow (create) Authenticated user can create their own coach customization.
     * @allow (get, update, delete) Authenticated user can read, update, and delete their own coach customization.
     * @deny (create) Authenticated user cannot create coach customizations for another user.
     * @deny (get, update, delete) Authenticated user cannot read, update, or delete another user's coach customizations.
     */
    match /coachCustomizations/{coachId} {
       function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to match details.
     * @path /matches/{matchId}
     * @allow (get, list) Public read access.
     * @deny (create, update, delete) Restricted writes.
     * @principle Public read access with restricted writes.
     */
    match /matches/{matchId} {
      allow get, list: if true; // Assuming matches are publicly visible.
      allow create, update, delete: if false; // TODO: Add admin role check for writes.
    }

    /**
     * @description Controls access to match comments.
     * @path /matches/{matchId}/comments/{commentId}
     * @allow (create) Authenticated users can create comments.
     * @allow (get, list) Public read access.
     * @allow (update, delete) Only the comment owner can update or delete their own comment.
     * @principle Public read access with owner-only writes.
     */
    match /matches/{matchId}/comments/{commentId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}