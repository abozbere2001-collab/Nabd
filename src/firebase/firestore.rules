/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and provides public read access where appropriate, with owner-only writes.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /users/{userId}/notifications/{notificationId}: Stores private notifications for each user.
 * - /favorites/{userId}: Stores user's favorite leagues, teams and players.
 * - /adminFavorites/{teamId}: Stores admin-curated favorites.
 * - /{entity}Customizations/{id}: Stores user customizations for leagues, countries, teams, etc.
 * - /matches/{matchId}: Stores match metadata (e.g., comment settings).
 * - /matches/{matchId}/comments/{commentId}: Stores comments for a specific match.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data, favorites, customizations, and notifications.
 * - Admin favorites are publicly readable, but only admins can create/update/delete them (currently not implemented, as admin roles are not specified).
 * - Match details are publicly readable.
 * - Match comments can be created by any authenticated user. Update and delete operations on comments are disallowed.
 * - List operations are generally allowed only for user-owned subcollections.
 *
 * Denormalization for Authorization:
 * - User-specific data (favorites, customizations, notifications) is nested under /users/{userId} or /favorites/{userId} to simplify ownership checks.
 * - Match comments include userId, userName, and userPhoto to avoid additional lookups when displaying comments.
 *
 * Structural Segregation:
 * - User profiles are stored in a dedicated /users/{userId} collection to avoid mixing public and private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if true
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for writes. Allows public read access.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get, list: if true;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;

      /**
       * @description Allows users to read and write their own notifications.
       * @path /users/{userId}/notifications/{notificationId}
       * @allow (create) if request.auth.uid == userId && request.resource.data.recipientId == userId
       * @allow (get, list) if request.auth.uid == userId
       * @deny (create) if request.auth.uid != userId
       * @principle Enforces document ownership.
       */
      match /notifications/{notificationId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.recipientId == userId;
        allow update: if false;
        allow delete: if false;
      }
    }

    /**
     * @description Allows users to read and write their own favorites.
     * @path /favorites/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership.
     */
    match /favorites/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read admin favorites, but only admins can create, update, or delete them.
     * @path /adminFavorites/{teamId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access. Restricts writes to admins (not implemented).
     */
    match /adminFavorites/{teamId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows users to read and write their own league customizations.
      * @path /leagueCustomizations/{leagueId}
      * @allow (create, update, delete) if request.auth.uid == userId
      * @allow (get) if request.auth.uid == userId
      * @deny (create) if request.auth.uid != userId
      * @principle Enforces document ownership.
      */
    match /leagueCustomizations/{leagueId} {
        allow get: if true;
        allow list: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null && resource != null;
        allow delete: if request.auth != null && resource != null;
    }

    /**
     * @description Allows users to read and write their own country customizations.
     * @path /countryCustomizations/{countryName}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership.
     */
    match /countryCustomizations/{countryName} {
        allow get: if true;
        allow list: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null && resource != null;
        allow delete: if request.auth != null && resource != null;
    }

    /**
     * @description Allows users to read and write their own continent customizations.
     * @path /continentCustomizations/{continentName}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership.
     */
    match /continentCustomizations/{continentName} {
        allow get: if true;
        allow list: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null && resource != null;
        allow delete: if request.auth != null && resource != null;
    }

    /**
     * @description Allows users to read and write their own team customizations.
     * @path /teamCustomizations/{teamId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership.
     */
    match /teamCustomizations/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource != null;
      allow delete: if request.auth != null && resource != null;
    }

    /**
     * @description Allows users to read and write their own player customizations.
     * @path /playerCustomizations/{playerId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership.
     */
    match /playerCustomizations/{playerId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource != null;
      allow delete: if request.auth != null && resource != null;
    }

    /**
     * @description Allows users to read and write their own coach customizations.
     * @path /coachCustomizations/{coachId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership.
     */
    match /coachCustomizations/{coachId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource != null;
      allow delete: if request.auth != null && resource != null;
    }

    /**
     * @description Allows anyone to read match details, but only admins can update them.
     * @path /matches/{matchId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access. Restricts writes to admins (not implemented).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;

      /**
       * @description Allows authenticated users to create match comments. Update and delete are disallowed.
       * @path /matches/{matchId}/comments/{commentId}
       * @allow (create) if request.auth != null
       * @deny (update, delete) if true
       * @principle Allows public create access for authenticated users.
       */
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if request.auth != null;
        allow update: if false;
        allow delete: if false;
      }
    }
  }
}