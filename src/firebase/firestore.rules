/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for a specific user.
 * - /favorites/{userId}: Stores user's favorite leagues, teams and players.
 * - /adminFavorites/{teamId}: Stores admin-curated favorite teams.
 * - /{entity}Customizations/{entityId}: Stores user-defined custom names for different entities (leagues, teams, players, coaches, etc.).
 * - /matches/{matchId}: Stores metadata about a match (e.g., comments enabled).
 * - /matches/{matchId}/comments/{commentId}: Stores comments for a specific match.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and favorites.
 * - Admin favorites are publicly readable.
 * - Customization data is publicly readable and writable only by the owner.
 * - Match details are publicly readable.
 * - Comments can be created by any authenticated user if comments are enabled for a match.
 *
 * Denormalization for Authorization: N/A
 *
 * Structural Segregation: N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if true
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @allow (update, delete) if request.auth.uid == userId && resource != null
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Restricts access to a user's own notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own favorite teams, players and leagues.
     * @path /favorites/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Restricts access to a user's own favorites.
     */
    match /favorites/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all favorites is not allowed.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read admin-curated favorite teams. Admins are not enforced in this prototype.
     * @path /adminFavorites/{teamId}
     * @allow get, list: if true
     * @allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
     * @principle Allows public read access to admin-curated content.
     */
    match /adminFavorites/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
    }

    /**
     * @description Allows anyone to read League Customizations
     * @path /leagueCustomizations/{leagueId}
     * @allow get, list: if true
     * @allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
     */
    match /leagueCustomizations/{leagueId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
    }

    /**
     * @description Allows anyone to read Country Customizations
     * @path /countryCustomizations/{countryName}
     * @allow get, list: if true
     * @allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
     */
    match /countryCustomizations/{countryName} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
    }

    /**
     * @description Allows anyone to read Continent Customizations
     * @path /continentCustomizations/{continentName}
     * @allow get, list: if true
     * @allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
     */
    match /continentCustomizations/{continentName} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
    }

    /**
     * @description Allows anyone to read Team Customizations
     * @path /teamCustomizations/{teamId}
     * @allow get, list: if true
     * @allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
     */
    match /teamCustomizations/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
    }

    /**
     * @description Allows anyone to read Player Customizations
     * @path /playerCustomizations/{playerId}
     * @allow get, list: if true
     * @allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
     */
    match /playerCustomizations/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
    }

    /**
     * @description Allows anyone to read Coach Customizations
     * @path /coachCustomizations/{coachId}
     * @allow get, list: if true
     * @allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
     */
    match /coachCustomizations/{coachId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
    }

    /**
     * @description Allows anyone to read Match Details.
     * @path /matches/{matchId}
     * @allow get, list: if true
     * @allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation for write operations.
    }

    /**
     * @description Allows authenticated users to create comments if comments are enabled for the match.
     * @path /matches/{matchId}/comments/{commentId}
     * @allow create: if isSignedIn() && get(/databases/$(database)/documents/matches/$(matchId)).data.commentsEnabled == true
     * @allow get, list: if true
     * @allow update, delete: if false; // TODO: Add comment owner or admin role validation for write operations.
     * @principle Allows public read access to match comments, restricts comment creation to authenticated users when comments are enabled.
     */
    match /matches/{matchId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/matches/$(matchId)).data.commentsEnabled == true;
      allow update: if false; // TODO: Add comment owner or admin role validation for write operations.
      allow delete: if false; // TODO: Add comment owner or admin role validation for write operations.
    }
  }
}